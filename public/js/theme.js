/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/layout.js":
/*!********************************!*\
  !*** ./resources/js/layout.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayout = function () {\n  var body;\n  var header;\n  var headerMenu;\n  var headerMenuOffcanvas;\n  var asideMenu;\n  var asideMenuOffcanvas;\n  var asideToggler;\n  var asideSecondary;\n  var asideSecondaryToggler;\n  var scrollTop;\n  var pageStickyPortlet; // Header\n\n  var _initHeader = function initHeader() {\n    var tmp;\n    var headerEl = KTUtil.get('kt_header');\n    var options = {\n      offset: {},\n      minimize: {\n        /*\n        desktop: {\n            on: 'kt-header--minimize'\n        },\n        */\n        desktop: false,\n        mobile: false\n      }\n    };\n\n    if (tmp = KTUtil.attr(headerEl, 'data-ktheader-minimize-offset')) {\n      options.offset.desktop = tmp;\n    }\n\n    if (tmp = KTUtil.attr(headerEl, 'data-ktheader-minimize-mobile-offset')) {\n      options.offset.mobile = tmp;\n    }\n\n    header = new KTHeader('kt_header', options);\n  }; // Header Menu\n\n\n  var initHeaderMenu = function initHeaderMenu() {\n    // init aside left offcanvas\n    headerMenuOffcanvas = new KTOffcanvas('kt_header_menu_wrapper', {\n      overlay: true,\n      baseClass: 'kt-header-menu-wrapper',\n      closeBy: 'kt_header_menu_mobile_close_btn',\n      toggleBy: {\n        target: 'kt_header_mobile_toggler',\n        state: 'kt-header-mobile__toolbar-toggler--active'\n      }\n    });\n    headerMenu = new KTMenu('kt_header_menu', {\n      submenu: {\n        desktop: 'dropdown',\n        tablet: 'accordion',\n        mobile: 'accordion'\n      },\n      accordion: {\n        slideSpeed: 200,\n        // accordion toggle slide speed in milliseconds\n        expandAll: false // allow having multiple expanded accordions in the menu\n\n      }\n    });\n  }; // Header Topbar\n\n\n  var initHeaderTopbar = function initHeaderTopbar() {\n    asideToggler = new KTToggle('kt_header_mobile_topbar_toggler', {\n      target: 'body',\n      targetState: 'kt-header__topbar--mobile-on',\n      togglerState: 'kt-header-mobile__toolbar-topbar-toggler--active'\n    });\n  }; // Aside\n\n\n  var _initAside = function initAside() {\n    // init aside left offcanvas\n    var asidBrandHover = false;\n    var aside = KTUtil.get('kt_aside');\n    var asideBrand = KTUtil.get('kt_aside_brand');\n    var asideOffcanvasClass = KTUtil.hasClass(aside, 'kt-aside--offcanvas-default') ? 'kt-aside--offcanvas-default' : 'kt-aside';\n    asideMenuOffcanvas = new KTOffcanvas('kt_aside', {\n      baseClass: asideOffcanvasClass,\n      overlay: true,\n      closeBy: 'kt_aside_close_btn',\n      toggleBy: {\n        target: 'kt_aside_mobile_toggler',\n        state: 'kt-header-mobile__toolbar-toggler--active'\n      }\n    }); // Handle minimzied aside hover\n\n    if (KTUtil.hasClass(body, 'kt-aside--fixed')) {\n      var insideTm;\n      var outsideTm;\n      KTUtil.addEvent(aside, 'mouseenter', function (e) {\n        e.preventDefault();\n\n        if (KTUtil.isInResponsiveRange('desktop') === false) {\n          return;\n        }\n\n        if (outsideTm) {\n          clearTimeout(outsideTm);\n          outsideTm = null;\n        }\n\n        insideTm = setTimeout(function () {\n          if (KTUtil.hasClass(body, 'kt-aside--minimize') && KTUtil.isInResponsiveRange('desktop')) {\n            KTUtil.removeClass(body, 'kt-aside--minimize'); // Minimizing class\n\n            KTUtil.addClass(body, 'kt-aside--minimizing');\n            KTUtil.transitionEnd(body, function () {\n              KTUtil.removeClass(body, 'kt-aside--minimizing');\n            }); // Hover class\n\n            KTUtil.addClass(body, 'kt-aside--minimize-hover');\n            asideMenu.scrollUpdate();\n            asideMenu.scrollTop();\n          }\n        }, 50);\n      });\n      KTUtil.addEvent(aside, 'mouseleave', function (e) {\n        e.preventDefault();\n\n        if (KTUtil.isInResponsiveRange('desktop') === false) {\n          return;\n        }\n\n        if (insideTm) {\n          clearTimeout(insideTm);\n          insideTm = null;\n        }\n\n        outsideTm = setTimeout(function () {\n          if (KTUtil.hasClass(body, 'kt-aside--minimize-hover') && KTUtil.isInResponsiveRange('desktop')) {\n            KTUtil.removeClass(body, 'kt-aside--minimize-hover');\n            KTUtil.addClass(body, 'kt-aside--minimize'); // Minimizing class\n\n            KTUtil.addClass(body, 'kt-aside--minimizing');\n            KTUtil.transitionEnd(body, function () {\n              KTUtil.removeClass(body, 'kt-aside--minimizing');\n            }); // Hover class\n\n            asideMenu.scrollUpdate();\n            asideMenu.scrollTop();\n          }\n        }, 100);\n      });\n    }\n  }; // Aside menu\n\n\n  var initAsideMenu = function initAsideMenu() {\n    // Init aside menu\n    var menu = KTUtil.get('kt_aside_menu');\n    var menuDesktopMode = KTUtil.attr(menu, 'data-ktmenu-dropdown') === '1' ? 'dropdown' : 'accordion';\n    var scroll;\n\n    if (KTUtil.attr(menu, 'data-ktmenu-scroll') === '1') {\n      scroll = {\n        rememberPosition: true,\n        // remember position on pages reload\n        height: function height() {\n          // calculate available scrollable area height\n          var height;\n\n          if (KTUtil.isInResponsiveRange('desktop')) {\n            height = parseInt(KTUtil.getViewPort().height) - parseInt(KTUtil.actualHeight('kt_aside_brand')) - parseInt(KTUtil.getByID('kt_aside_footer') ? KTUtil.actualHeight('kt_aside_footer') : 0);\n          } else {\n            height = parseInt(KTUtil.getViewPort().height) - parseInt(KTUtil.getByID('kt_aside_footer') ? KTUtil.actualHeight('kt_aside_footer') : 0);\n          }\n\n          height = height - (parseInt(KTUtil.css(menu, 'marginBottom')) + parseInt(KTUtil.css(menu, 'marginTop')));\n          return height;\n        }\n      };\n    }\n\n    asideMenu = new KTMenu('kt_aside_menu', {\n      // vertical scroll\n      scroll: scroll,\n      // submenu setup\n      submenu: {\n        desktop: menuDesktopMode,\n        tablet: 'accordion',\n        // menu set to accordion in tablet mode\n        mobile: 'accordion' // menu set to accordion in mobile mode\n\n      },\n      //accordion setup\n      accordion: {\n        expandAll: false // allow having multiple expanded accordions in the menu\n\n      }\n    }); // sample set active menu\n    // asideMenu.setActiveItem($('a[href=\"?pages=custom/pages/pricing/pricing-1&demo=demo1\"]').closest('.kt-menu__item')[0]);\n  }; // Sidebar toggle\n\n\n  var initAsideToggler = function initAsideToggler() {\n    if (!KTUtil.get('kt_aside_toggler')) {\n      return;\n    }\n\n    asideToggler = new KTToggle('kt_aside_toggler', {\n      target: 'body',\n      targetState: 'kt-aside--minimize',\n      togglerState: 'kt-aside__brand-aside-toggler--active'\n    });\n    asideToggler.on('toggle', function (toggle) {\n      KTUtil.addClass(body, 'kt-aside--minimizing');\n\n      if (KTUtil.get('kt_page_portlet')) {\n        pageStickyPortlet.updateSticky();\n      }\n\n      KTUtil.transitionEnd(body, function () {\n        KTUtil.removeClass(body, 'kt-aside--minimizing');\n      });\n      headerMenu.pauseDropdownHover(800);\n      asideMenu.pauseDropdownHover(800); // Remember state in cookie\n\n      Cookies.set('kt_aside_toggle_state', toggle.getState()); // to set default minimized left aside use this cookie value in your\n      // server side code and add \"kt-brand--minimize kt-aside--minimize\" classes to\n      // the body tag in order to initialize the minimized left aside mode during pages loading.\n    });\n    asideToggler.on('beforeToggle', function (toggle) {\n      var body = KTUtil.get('body');\n\n      if (KTUtil.hasClass(body, 'kt-aside--minimize') === false && KTUtil.hasClass(body, 'kt-aside--minimize-hover')) {\n        KTUtil.removeClass(body, 'kt-aside--minimize-hover');\n      }\n    });\n  }; // Aside secondary\n\n\n  var _initAsideSecondary = function initAsideSecondary() {\n    if (!KTUtil.get('kt_aside_secondary')) {\n      return;\n    }\n\n    asideSecondaryToggler = new KTToggle('kt_aside_secondary_toggler', {\n      target: 'body',\n      targetState: 'kt-aside-secondary--expanded'\n    });\n    asideSecondaryToggler.on('toggle', function (toggle) {\n      if (KTUtil.get('kt_page_portlet')) {\n        pageStickyPortlet.updateSticky();\n      }\n    });\n  }; // Scrolltop\n\n\n  var initScrolltop = function initScrolltop() {\n    var scrolltop = new KTScrolltop('kt_scrolltop', {\n      offset: 300,\n      speed: 600\n    });\n  }; // Init pages sticky portlet\n\n\n  var _initPageStickyPortlet = function initPageStickyPortlet() {\n    return new KTPortlet('kt_page_portlet', {\n      sticky: {\n        offset: parseInt(KTUtil.css(KTUtil.get('kt_header'), 'height')),\n        zIndex: 90,\n        position: {\n          top: function top() {\n            var pos = 0;\n\n            if (KTUtil.isInResponsiveRange('desktop')) {\n              if (KTUtil.hasClass(body, 'kt-header--fixed')) {\n                pos = pos + parseInt(KTUtil.css(KTUtil.get('kt_header'), 'height'));\n              }\n\n              if (KTUtil.hasClass(body, 'kt-subheader--fixed') && KTUtil.get('kt_subheader')) {\n                pos = pos + parseInt(KTUtil.css(KTUtil.get('kt_subheader'), 'height'));\n              }\n            } else {\n              if (KTUtil.hasClass(body, 'kt-header-mobile--fixed')) {\n                pos = pos + parseInt(KTUtil.css(KTUtil.get('kt_header_mobile'), 'height'));\n              }\n            }\n\n            return pos;\n          },\n          left: function left(portlet) {\n            var porletEl = portlet.getSelf();\n            return KTUtil.offset(porletEl).left;\n          },\n          right: function right(portlet) {\n            var porletEl = portlet.getSelf();\n            var portletWidth = parseInt(KTUtil.css(porletEl, 'width'));\n            var bodyWidth = parseInt(KTUtil.css(KTUtil.get('body'), 'width'));\n            var portletOffsetLeft = KTUtil.offset(porletEl).left;\n            return bodyWidth - portletWidth - portletOffsetLeft;\n          }\n        }\n      }\n    });\n  }; // Calculate content available full height\n\n\n  var _getContentHeight = function getContentHeight() {\n    var height;\n    height = KTUtil.getViewPort().height;\n\n    if (KTUtil.getByID('kt_header')) {\n      height = height - KTUtil.actualHeight('kt_header');\n    }\n\n    if (KTUtil.getByID('kt_subheader')) {\n      height = height - KTUtil.actualHeight('kt_subheader');\n    }\n\n    if (KTUtil.getByID('kt_footer')) {\n      height = height - parseInt(KTUtil.css('kt_footer', 'height'));\n    }\n\n    if (KTUtil.getByID('kt_content')) {\n      height = height - parseInt(KTUtil.css('kt_content', 'padding-top')) - parseInt(KTUtil.css('kt_content', 'padding-bottom'));\n    }\n\n    return height;\n  };\n\n  return {\n    init: function init() {\n      body = KTUtil.get('body');\n      this.initHeader();\n      this.initAside();\n      this.initAsideSecondary();\n      this.initPageStickyPortlet(); // Non functional links notice(can be removed in production)\n\n      $('#kt_aside_menu, #kt_header_menu').on('click', '.kt-menu__link[href=\"#\"]', function (e) {\n        swal.fire(\"\", \"You have clicked on a non-functional dummy link!\");\n        e.preventDefault();\n      });\n    },\n    initHeader: function initHeader() {\n      _initHeader();\n\n      initHeaderMenu();\n      initHeaderTopbar();\n      initScrolltop();\n    },\n    initAside: function initAside() {\n      _initAside();\n\n      initAsideMenu();\n      initAsideToggler();\n      this.onAsideToggle(function (e) {\n        // Update sticky portlet\n        if (pageStickyPortlet) {\n          pageStickyPortlet.updateSticky();\n        } // Reload datatable\n\n\n        var datatables = $('.kt-datatable');\n\n        if (datatables) {\n          datatables.each(function () {\n            $(this).KTDatatable('redraw');\n          });\n        }\n      });\n    },\n    initAsideSecondary: function initAsideSecondary() {\n      _initAsideSecondary();\n    },\n    initPageStickyPortlet: function initPageStickyPortlet() {\n      if (!KTUtil.get('kt_page_portlet')) {\n        return;\n      }\n\n      pageStickyPortlet = _initPageStickyPortlet();\n      pageStickyPortlet.initSticky();\n      KTUtil.addResizeHandler(function () {\n        pageStickyPortlet.updateSticky();\n      });\n\n      _initPageStickyPortlet();\n    },\n    getAsideMenu: function getAsideMenu() {\n      return asideMenu;\n    },\n    onAsideToggle: function onAsideToggle(handler) {\n      if (typeof asideToggler.element !== 'undefined') {\n        asideToggler.on('toggle', handler);\n      }\n    },\n    getAsideToggler: function getAsideToggler() {\n      return asideToggler;\n    },\n    openAsideSecondary: function openAsideSecondary() {\n      asideSecondaryToggler.toggleOn();\n    },\n    closeAsideSecondary: function closeAsideSecondary() {\n      asideSecondaryToggler.toggleOff();\n    },\n    getAsideSecondaryToggler: function getAsideSecondaryToggler() {\n      return asideSecondaryToggler;\n    },\n    onAsideSecondaryToggle: function onAsideSecondaryToggle(handler) {\n      if (asideSecondaryToggler) {\n        asideSecondaryToggler.on('toggle', handler);\n      }\n    },\n    closeMobileAsideMenuOffcanvas: function closeMobileAsideMenuOffcanvas() {\n      if (KTUtil.isMobileDevice()) {\n        asideMenuOffcanvas.hide();\n      }\n    },\n    closeMobileHeaderMenuOffcanvas: function closeMobileHeaderMenuOffcanvas() {\n      if (KTUtil.isMobileDevice()) {\n        headerMenuOffcanvas.hide();\n      }\n    },\n    getContentHeight: function getContentHeight() {\n      return _getContentHeight();\n    }\n  };\n}(); // webpack support\n\n\nif (true) {\n  module.exports = KTLayout;\n}\n\nKTUtil.ready(function () {\n  KTLayout.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/layout.js\n");

/***/ }),

/***/ "./resources/js/theme.js":
/*!*******************************!*\
  !*** ./resources/js/theme.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Metronic 6.0.6\n * This is global file and will be included by /webpack/demos/{demo}/script.js\n */\n// Keentheme's plugins\n\nwindow.KTUtil = __webpack_require__(/*! ./theme/core/util */ \"./resources/js/theme/core/util.js\");\nwindow.KTApp = __webpack_require__(/*! ./theme/core/app */ \"./resources/js/theme/core/app.js\"); // window.KTAvatar = require('./theme/core/base/avatar');\n// window.KTDialog = require('./theme/core/base/dialog');\n\nwindow.KTHeader = __webpack_require__(/*! ./theme/core/base/header */ \"./resources/js/theme/core/base/header.js\");\nwindow.KTMenu = __webpack_require__(/*! ./theme/core/base/menu */ \"./resources/js/theme/core/base/menu.js\");\nwindow.KTOffcanvas = __webpack_require__(/*! ./theme/core/base/offcanvas */ \"./resources/js/theme/core/base/offcanvas.js\"); // window.KTPortlet = require('./theme/core/base/portlet');\n\nwindow.KTScrolltop = __webpack_require__(/*! ./theme/core/base/scrolltop */ \"./resources/js/theme/core/base/scrolltop.js\");\nwindow.KTToggle = __webpack_require__(/*! ./theme/core/base/toggle */ \"./resources/js/theme/core/base/toggle.js\"); // window.KTWizard = require('./theme/core/base/wizard');\n// require('./theme/core/base/datatable/core.datatable');\n// require('./theme/core/base/datatable/datatable.checkbox');\n// require('./theme/core/base/datatable/datatable.rtl');\n// Layout scripts\n// window.KTChat = require('./theme/core/layout/chat');\n// require('./theme/core/layout/demo-panel');\n\n__webpack_require__(/*! ./theme/core/layout/offcanvas-panel */ \"./resources/js/theme/core/layout/offcanvas-panel.js\");\n\n__webpack_require__(/*! ./theme/core/layout/quick-panel */ \"./resources/js/theme/core/layout/quick-panel.js\");\n\n__webpack_require__(/*! ./theme/core/layout/quick-search */ \"./resources/js/theme/core/layout/quick-search.js\"); // scripts\n\n\nwindow.KTLayout = __webpack_require__(/*! ./layout.js */ \"./resources/js/layout.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvdGhlbWUuanM/YmM0ZCJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBYTtBQUViO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0FBLE1BQU0sQ0FBTkEsU0FBZ0JDLG1CQUFPLENBQXZCRCw0REFBdUIsQ0FBdkJBO0FBQ0FBLE1BQU0sQ0FBTkEsUUFBZUMsbUJBQU8sQ0FBdEJELDBEQUFzQixDQUF0QkEsQyxDQUNBO0FBQ0E7O0FBQ0FBLE1BQU0sQ0FBTkEsV0FBa0JDLG1CQUFPLENBQXpCRCwwRUFBeUIsQ0FBekJBO0FBQ0FBLE1BQU0sQ0FBTkEsU0FBZ0JDLG1CQUFPLENBQXZCRCxzRUFBdUIsQ0FBdkJBO0FBQ0FBLE1BQU0sQ0FBTkEsY0FBcUJDLG1CQUFPLENBQTVCRCxnRkFBNEIsQ0FBNUJBLEMsQ0FDQTs7QUFDQUEsTUFBTSxDQUFOQSxjQUFxQkMsbUJBQU8sQ0FBNUJELGdGQUE0QixDQUE1QkE7QUFDQUEsTUFBTSxDQUFOQSxXQUFrQkMsbUJBQU8sQ0FBekJELDBFQUF5QixDQUF6QkEsQyxDQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOztBQUNBQyxtQkFBTyxDQUFQQSxnR0FBTyxDQUFQQTs7QUFDQUEsbUJBQU8sQ0FBUEEsd0ZBQU8sQ0FBUEE7O0FBQ0FBLG1CQUFPLENBQVBBLDBGQUFPLENBQVBBLEMsQ0FFQTs7O0FBQ0FELE1BQU0sQ0FBTkEsV0FBa0JDLG1CQUFPLENBQXpCRCw2Q0FBeUIsQ0FBekJBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL3RoZW1lLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1ldHJvbmljIDYuMC42XG4gKiBUaGlzIGlzIGdsb2JhbCBmaWxlIGFuZCB3aWxsIGJlIGluY2x1ZGVkIGJ5IC93ZWJwYWNrL2RlbW9zL3tkZW1vfS9zY3JpcHQuanNcbiAqL1xuXG4vLyBLZWVudGhlbWUncyBwbHVnaW5zXG53aW5kb3cuS1RVdGlsID0gcmVxdWlyZSgnLi90aGVtZS9jb3JlL3V0aWwnKTtcbndpbmRvdy5LVEFwcCA9IHJlcXVpcmUoJy4vdGhlbWUvY29yZS9hcHAnKTtcbi8vIHdpbmRvdy5LVEF2YXRhciA9IHJlcXVpcmUoJy4vdGhlbWUvY29yZS9iYXNlL2F2YXRhcicpO1xuLy8gd2luZG93LktURGlhbG9nID0gcmVxdWlyZSgnLi90aGVtZS9jb3JlL2Jhc2UvZGlhbG9nJyk7XG53aW5kb3cuS1RIZWFkZXIgPSByZXF1aXJlKCcuL3RoZW1lL2NvcmUvYmFzZS9oZWFkZXInKTtcbndpbmRvdy5LVE1lbnUgPSByZXF1aXJlKCcuL3RoZW1lL2NvcmUvYmFzZS9tZW51Jyk7XG53aW5kb3cuS1RPZmZjYW52YXMgPSByZXF1aXJlKCcuL3RoZW1lL2NvcmUvYmFzZS9vZmZjYW52YXMnKTtcbi8vIHdpbmRvdy5LVFBvcnRsZXQgPSByZXF1aXJlKCcuL3RoZW1lL2NvcmUvYmFzZS9wb3J0bGV0Jyk7XG53aW5kb3cuS1RTY3JvbGx0b3AgPSByZXF1aXJlKCcuL3RoZW1lL2NvcmUvYmFzZS9zY3JvbGx0b3AnKTtcbndpbmRvdy5LVFRvZ2dsZSA9IHJlcXVpcmUoJy4vdGhlbWUvY29yZS9iYXNlL3RvZ2dsZScpO1xuLy8gd2luZG93LktUV2l6YXJkID0gcmVxdWlyZSgnLi90aGVtZS9jb3JlL2Jhc2Uvd2l6YXJkJyk7XG4vLyByZXF1aXJlKCcuL3RoZW1lL2NvcmUvYmFzZS9kYXRhdGFibGUvY29yZS5kYXRhdGFibGUnKTtcbi8vIHJlcXVpcmUoJy4vdGhlbWUvY29yZS9iYXNlL2RhdGF0YWJsZS9kYXRhdGFibGUuY2hlY2tib3gnKTtcbi8vIHJlcXVpcmUoJy4vdGhlbWUvY29yZS9iYXNlL2RhdGF0YWJsZS9kYXRhdGFibGUucnRsJyk7XG5cbi8vIExheW91dCBzY3JpcHRzXG4vLyB3aW5kb3cuS1RDaGF0ID0gcmVxdWlyZSgnLi90aGVtZS9jb3JlL2xheW91dC9jaGF0Jyk7XG4vLyByZXF1aXJlKCcuL3RoZW1lL2NvcmUvbGF5b3V0L2RlbW8tcGFuZWwnKTtcbnJlcXVpcmUoJy4vdGhlbWUvY29yZS9sYXlvdXQvb2ZmY2FudmFzLXBhbmVsJyk7XG5yZXF1aXJlKCcuL3RoZW1lL2NvcmUvbGF5b3V0L3F1aWNrLXBhbmVsJyk7XG5yZXF1aXJlKCcuL3RoZW1lL2NvcmUvbGF5b3V0L3F1aWNrLXNlYXJjaCcpO1xuXG4vLyBzY3JpcHRzXG53aW5kb3cuS1RMYXlvdXQgPSByZXF1aXJlKCcuL2xheW91dC5qcycpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/theme.js\n");

/***/ }),

/***/ "./resources/js/theme/core/app.js":
/*!****************************************!*\
  !*** ./resources/js/theme/core/app.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @class KApp\n */\n\nvar KTApp = function () {\n  /** @type {object} colors State colors **/\n  var colors = {};\n\n  var _initTooltip = function initTooltip(el) {\n    var skin = el.data('skin') ? 'tooltip-' + el.data('skin') : '';\n    var width = el.data('width') == 'auto' ? 'tooltop-auto-width' : '';\n    var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';\n    var placement = el.data('placement') ? el.data('placement') : 'left';\n    el.tooltip({\n      trigger: triggerValue,\n      template: '<div class=\"tooltip ' + skin + ' ' + width + '\" role=\"tooltip\">\\\n                <div class=\"arrow\"></div>\\\n                <div class=\"tooltip-inner\"></div>\\\n            </div>'\n    });\n  };\n\n  var _initTooltips = function initTooltips() {\n    // init bootstrap tooltips\n    $('[data-toggle=\"kt-tooltip\"]').each(function () {\n      _initTooltip($(this));\n    });\n  };\n\n  var _initPopover = function initPopover(el) {\n    var skin = el.data('skin') ? 'popover-' + el.data('skin') : '';\n    var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';\n    el.popover({\n      trigger: triggerValue,\n      template: '\\\n            <div class=\"popover ' + skin + '\" role=\"tooltip\">\\\n                <div class=\"arrow\"></div>\\\n                <h3 class=\"popover-header\"></h3>\\\n                <div class=\"popover-body\"></div>\\\n            </div>'\n    });\n  };\n\n  var _initPopovers = function initPopovers() {\n    // init bootstrap popover\n    $('[data-toggle=\"kt-popover\"]').each(function () {\n      _initPopover($(this));\n    });\n  };\n\n  var initFileInput = function initFileInput() {\n    // init bootstrap popover\n    $('.custom-file-input').on('change', function () {\n      var fileName = $(this).val();\n      $(this).next('.custom-file-label').addClass(\"selected\").html(fileName);\n    });\n  };\n\n  var _initPortlet = function initPortlet(el, options) {\n    // init portlet tools\n    var el = $(el);\n    var portlet = new KTPortlet(el[0], options);\n  };\n\n  var _initPortlets = function initPortlets() {\n    // init portlet tools\n    $('[data-ktportlet=\"true\"]').each(function () {\n      var el = $(this);\n\n      if (el.data('data-ktportlet-initialized') !== true) {\n        _initPortlet(el, {});\n\n        el.data('data-ktportlet-initialized', true);\n      }\n    });\n  };\n\n  var initScroll = function initScroll() {\n    $('[data-scroll=\"true\"]').each(function () {\n      var el = $(this);\n      KTUtil.scrollInit(this, {\n        mobileNativeScroll: true,\n        handleWindowResize: true,\n        rememberPosition: el.data('remember-position') == 'true' ? true : false,\n        height: function height() {\n          if (KTUtil.isInResponsiveRange('tablet-and-mobile') && el.data('mobile-height')) {\n            return el.data('mobile-height');\n          } else {\n            return el.data('height');\n          }\n        }\n      });\n    });\n  };\n\n  var initAlerts = function initAlerts() {\n    // init bootstrap popover\n    $('body').on('click', '[data-close=alert]', function () {\n      $(this).closest('.alert').hide();\n    });\n  };\n\n  var _initSticky = function initSticky() {\n    var sticky = new Sticky('[data-sticky=\"true\"]');\n  };\n\n  var _initAbsoluteDropdown = function initAbsoluteDropdown(context) {\n    var dropdownMenu;\n\n    if (!context) {\n      return;\n    }\n\n    $('body').on('show.bs.dropdown', context, function (e) {\n      dropdownMenu = $(e.target).find('.dropdown-menu');\n      $('body').append(dropdownMenu.detach());\n      dropdownMenu.css('display', 'block');\n      dropdownMenu.position({\n        'my': 'right top',\n        'at': 'right bottom',\n        'of': $(e.relatedTarget)\n      });\n    }).on('hide.bs.dropdown', context, function (e) {\n      $(e.target).append(dropdownMenu.detach());\n      dropdownMenu.hide();\n    });\n  };\n\n  var initAbsoluteDropdowns = function initAbsoluteDropdowns() {\n    $('body').on('show.bs.dropdown', function (e) {\n      if ($(e.target).find(\"[data-attach='body']\").length === 0) {\n        return;\n      }\n\n      var dropdownMenu = $(e.target).find('.dropdown-menu');\n      $('body').append(dropdownMenu.detach());\n      dropdownMenu.css('display', 'block');\n      dropdownMenu.position({\n        'my': 'right top',\n        'at': 'right bottom',\n        'of': $(e.relatedTarget)\n      });\n    });\n    $('body').on('hide.bs.dropdown', function (e) {\n      if ($(e.target).find(\"[data-attach='body']\").length === 0) {\n        return;\n      }\n\n      var dropdownMenu = $(e.target).find('.dropdown-menu');\n      $(e.target).append(dropdownMenu.detach());\n      dropdownMenu.hide();\n    });\n  };\n\n  return {\n    init: function init(options) {\n      if (options && options.colors) {\n        colors = options.colors;\n      }\n\n      KTApp.initComponents();\n    },\n    initComponents: function initComponents() {\n      initScroll();\n\n      _initTooltips();\n\n      _initPopovers();\n\n      initAlerts();\n\n      _initPortlets();\n\n      initFileInput();\n\n      _initSticky();\n\n      initAbsoluteDropdowns();\n    },\n    initTooltips: function initTooltips() {\n      _initTooltips();\n    },\n    initTooltip: function initTooltip(el) {\n      _initTooltip(el);\n    },\n    initPopovers: function initPopovers() {\n      _initPopovers();\n    },\n    initPopover: function initPopover(el) {\n      _initPopover(el);\n    },\n    initPortlet: function initPortlet(el, options) {\n      _initPortlet(el, options);\n    },\n    initPortlets: function initPortlets() {\n      _initPortlets();\n    },\n    initSticky: function initSticky() {\n      _initSticky();\n    },\n    initAbsoluteDropdown: function initAbsoluteDropdown(context) {\n      _initAbsoluteDropdown(context);\n    },\n    block: function block(target, options) {\n      var el = $(target);\n      options = $.extend(true, {\n        opacity: 0.05,\n        overlayColor: '#000000',\n        type: '',\n        size: '',\n        state: 'brand',\n        centerX: true,\n        centerY: true,\n        message: '',\n        shadow: true,\n        width: 'auto'\n      }, options);\n      var html;\n      var version = options.type ? 'kt-spinner--' + options.type : '';\n      var state = options.state ? 'kt-spinner--' + options.state : '';\n      var size = options.size ? 'kt-spinner--' + options.size : '';\n      var spinner = '<div class=\"kt-spinner ' + version + ' ' + state + ' ' + size + '\"></div';\n\n      if (options.message && options.message.length > 0) {\n        var classes = 'blockui ' + (options.shadow === false ? 'blockui' : '');\n        html = '<div class=\"' + classes + '\"><span>' + options.message + '</span><span>' + spinner + '</span></div>';\n        var el = document.createElement('div');\n        KTUtil.get('body').prepend(el);\n        KTUtil.addClass(el, classes);\n        el.innerHTML = '<span>' + options.message + '</span><span>' + spinner + '</span>';\n        options.width = KTUtil.actualWidth(el) + 10;\n        KTUtil.remove(el);\n\n        if (target == 'body') {\n          html = '<div class=\"' + classes + '\" style=\"margin-left:-' + options.width / 2 + 'px;\"><span>' + options.message + '</span><span>' + spinner + '</span></div>';\n        }\n      } else {\n        html = spinner;\n      }\n\n      var params = {\n        message: html,\n        centerY: options.centerY,\n        centerX: options.centerX,\n        css: {\n          top: '30%',\n          left: '50%',\n          border: '0',\n          padding: '0',\n          backgroundColor: 'none',\n          width: options.width\n        },\n        overlayCSS: {\n          backgroundColor: options.overlayColor,\n          opacity: options.opacity,\n          cursor: 'wait',\n          zIndex: '10'\n        },\n        onUnblock: function onUnblock() {\n          if (el && el[0]) {\n            KTUtil.css(el[0], 'position', '');\n            KTUtil.css(el[0], 'zoom', '');\n          }\n        }\n      };\n\n      if (target == 'body') {\n        params.css.top = '50%';\n        $.blockUI(params);\n      } else {\n        var el = $(target);\n        el.block(params);\n      }\n    },\n    unblock: function unblock(target) {\n      if (target && target != 'body') {\n        $(target).unblock();\n      } else {\n        $.unblockUI();\n      }\n    },\n    blockPage: function blockPage(options) {\n      return KTApp.block('body', options);\n    },\n    unblockPage: function unblockPage() {\n      return KTApp.unblock('body');\n    },\n    progress: function progress(target, options) {\n      var skin = options && options.skin ? options.skin : 'light';\n      var alignment = options && options.alignment ? options.alignment : 'right';\n      var size = options && options.size ? ' kt-spinner--' + options.size : '';\n      var classes = 'kt-spinner ' + 'kt-spinner--' + skin + ' kt-spinner--' + alignment + size;\n      KTApp.unprogress(target);\n      KTUtil.attr(target, 'disabled', true);\n      $(target).addClass(classes);\n      $(target).data('progress-classes', classes);\n    },\n    unprogress: function unprogress(target) {\n      $(target).removeClass($(target).data('progress-classes'));\n      KTUtil.removeAttr(target, 'disabled');\n    },\n    getStateColor: function getStateColor(name) {\n      return colors[\"state\"][name];\n    },\n    getBaseColor: function getBaseColor(type, level) {\n      return colors[\"base\"][type][level - 1];\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTApp;\n} // Initialize KTApp class on document ready\n\n\n$(document).ready(function () {\n  KTApp.init(KTAppOptions);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/theme/core/app.js\n");

/***/ }),

/***/ "./resources/js/theme/core/base/header.js":
/*!************************************************!*\
  !*** ./resources/js/theme/core/base/header.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTHeader = function KTHeader(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.get(elementId);\n  var body = KTUtil.get('body');\n\n  if (element === undefined) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    classic: false,\n    offset: {\n      mobile: 150,\n      desktop: 200\n    },\n    minimize: {\n      mobile: false,\n      desktop: false\n    }\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\n     * Run plugin\n     * @returns {KTHeader}\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('header')) {\n        the = KTUtil.data(element).get('header');\n      } else {\n        // reset header\n        Plugin.init(options); // build header\n\n        Plugin.build();\n        KTUtil.data(element).set('header', the);\n      }\n\n      return the;\n    },\n\n    /**\n     * Handles subheader click toggle\n     * @returns {KTHeader}\n     */\n    init: function init(options) {\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    },\n\n    /**\n     * Reset header\n     * @returns {KTHeader}\n     */\n    build: function build() {\n      var lastScrollTop = 0;\n      var eventTriggerState = true;\n      var viewportHeight = KTUtil.getViewPort().height;\n      var documentHeight = KTUtil.getDocumentHeight();\n\n      if (the.options.minimize.mobile === false && the.options.minimize.desktop === false) {\n        return;\n      }\n\n      window.addEventListener('scroll', function () {\n        var offset = 0,\n            on,\n            off,\n            st;\n\n        if (KTUtil.isInResponsiveRange('desktop')) {\n          offset = the.options.offset.desktop;\n          on = the.options.minimize.desktop.on;\n          off = the.options.minimize.desktop.off;\n        } else if (KTUtil.isInResponsiveRange('tablet-and-mobile')) {\n          offset = the.options.offset.mobile;\n          on = the.options.minimize.mobile.on;\n          off = the.options.minimize.mobile.off;\n        }\n\n        st = KTUtil.getScrollTop();\n        console.log('top:' + st);\n        console.log('offset:' + offset);\n        console.log('documentHeight:' + documentHeight);\n\n        if (KTUtil.isInResponsiveRange('tablet-and-mobile') && the.options.classic && the.options.classic.mobile || KTUtil.isInResponsiveRange('desktop') && the.options.classic && the.options.classic.desktop) {\n          if (st > offset) {\n            // down scroll mode\n            KTUtil.addClass(body, on);\n            KTUtil.removeClass(body, off);\n\n            if (eventTriggerState) {\n              Plugin.eventTrigger('minimizeOn', the);\n              eventTriggerState = false;\n            }\n          } else {\n            // back scroll mode\n            KTUtil.addClass(body, off);\n            KTUtil.removeClass(body, on);\n\n            if (eventTriggerState == false) {\n              Plugin.eventTrigger('minimizeOff', the);\n              eventTriggerState = true;\n            }\n          }\n        } else {\n          if (st > offset && lastScrollTop < st) {\n            // down scroll mode\n            KTUtil.addClass(body, on);\n            KTUtil.removeClass(body, off);\n\n            if (eventTriggerState) {\n              Plugin.eventTrigger('minimizeOn', the);\n              eventTriggerState = false;\n            }\n          } else {\n            // back scroll mode\n            KTUtil.addClass(body, off);\n            KTUtil.removeClass(body, on);\n\n            if (eventTriggerState == false) {\n              Plugin.eventTrigger('minimizeOff', the);\n              eventTriggerState = true;\n            }\n          }\n\n          lastScrollTop = st;\n        }\n      });\n    },\n\n    /**\n     * Trigger events\n     */\n    eventTrigger: function eventTrigger(name, args) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the, args);\n            }\n          } else {\n            return event.handler.call(this, the, args);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\n   * Set default options\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\n   * Register event\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  }; ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n  // Run plugin\n\n\n  Plugin.construct.apply(the, [options]); // Init done\n\n  init = true; // Return plugin instance\n\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTHeader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/theme/core/base/header.js\n");

/***/ }),

/***/ "./resources/js/theme/core/base/menu.js":
/*!**********************************************!*\
  !*** ./resources/js/theme/core/base/menu.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTMenu = function KTMenu(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.get(elementId);\n  var body = KTUtil.get('body');\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    // scrollable area with Perfect Scroll\n    scroll: {\n      rememberPosition: false\n    },\n    // accordion submenu mode\n    accordion: {\n      slideSpeed: 200,\n      // accordion toggle slide speed in milliseconds\n      autoScroll: false,\n      // enable auto scrolling(focus) to the clicked menu item\n      autoScrollSpeed: 1200,\n      expandAll: true // allow having multiple expanded accordions in the menu\n\n    },\n    // dropdown submenu mode\n    dropdown: {\n      timeout: 500 // timeout in milliseconds to show and hide the hoverable submenu dropdown\n\n    }\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\n     * Run plugin\n     * @returns {KTMenu}\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('menu')) {\n        the = KTUtil.data(element).get('menu');\n      } else {\n        // reset menu\n        Plugin.init(options); // reset menu\n\n        Plugin.reset(); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('menu', the);\n      }\n\n      return the;\n    },\n\n    /**\n     * Handles submenu click toggle\n     * @returns {KTMenu}\n     */\n    init: function init(options) {\n      the.events = [];\n      the.eventHandlers = {}; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options); // pause menu\n\n      the.pauseDropdownHoverTime = 0;\n      the.uid = KTUtil.getUniqueID();\n    },\n    update: function update(options) {\n      // merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options); // pause menu\n\n      the.pauseDropdownHoverTime = 0; // reset menu\n\n      Plugin.reset();\n      the.eventHandlers = {}; // build menu\n\n      Plugin.build();\n      KTUtil.data(element).set('menu', the);\n    },\n    reload: function reload() {\n      // reset menu\n      Plugin.reset(); // build menu\n\n      Plugin.build(); // reset submenu props\n\n      Plugin.resetSubmenuProps();\n    },\n\n    /**\n     * Reset menu\n     * @returns {KTMenu}\n     */\n    build: function build() {\n      // General accordion submenu toggle\n      the.eventHandlers['event_1'] = KTUtil.on(element, '.kt-menu__toggle', 'click', Plugin.handleSubmenuAccordion); // Dropdown mode(hoverable)\n\n      if (Plugin.getSubmenuMode() === 'dropdown' || Plugin.isConditionalSubmenuDropdown()) {\n        // dropdown submenu - hover toggle\n        the.eventHandlers['event_2'] = KTUtil.on(element, '[data-ktmenu-submenu-toggle=\"hover\"]', 'mouseover', Plugin.handleSubmenuDrodownHoverEnter);\n        the.eventHandlers['event_3'] = KTUtil.on(element, '[data-ktmenu-submenu-toggle=\"hover\"]', 'mouseout', Plugin.handleSubmenuDrodownHoverExit); // dropdown submenu - click toggle\n\n        the.eventHandlers['event_4'] = KTUtil.on(element, '[data-ktmenu-submenu-toggle=\"click\"] > .kt-menu__toggle, [data-ktmenu-submenu-toggle=\"click\"] > .kt-menu__link .kt-menu__toggle', 'click', Plugin.handleSubmenuDropdownClick);\n        the.eventHandlers['event_5'] = KTUtil.on(element, '[data-ktmenu-submenu-toggle=\"tab\"] > .kt-menu__toggle, [data-ktmenu-submenu-toggle=\"tab\"] > .kt-menu__link .kt-menu__toggle', 'click', Plugin.handleSubmenuDropdownTabClick);\n      } // handle link click\n\n\n      the.eventHandlers['event_6'] = KTUtil.on(element, '.kt-menu__item > .kt-menu__link:not(.kt-menu__toggle):not(.kt-menu__link--toggle-skip)', 'click', Plugin.handleLinkClick); // Init scrollable menu\n\n      if (the.options.scroll && the.options.scroll.height) {\n        Plugin.scrollInit();\n      }\n    },\n\n    /**\n     * Reset menu\n     * @returns {KTMenu}\n     */\n    reset: function reset() {\n      KTUtil.off(element, 'click', the.eventHandlers['event_1']); // dropdown submenu - hover toggle\n\n      KTUtil.off(element, 'mouseover', the.eventHandlers['event_2']);\n      KTUtil.off(element, 'mouseout', the.eventHandlers['event_3']); // dropdown submenu - click toggle\n\n      KTUtil.off(element, 'click', the.eventHandlers['event_4']);\n      KTUtil.off(element, 'click', the.eventHandlers['event_5']); // handle link click\n\n      KTUtil.off(element, 'click', the.eventHandlers['event_6']);\n    },\n\n    /**\n     * Init scroll menu\n     *\n    */\n    scrollInit: function scrollInit() {\n      if (the.options.scroll && the.options.scroll.height) {\n        KTUtil.scrollDestroy(element);\n        KTUtil.scrollInit(element, {\n          mobileNativeScroll: true,\n          windowScroll: false,\n          resetHeightOnDestroy: true,\n          handleWindowResize: true,\n          height: the.options.scroll.height,\n          rememberPosition: the.options.scroll.rememberPosition\n        });\n      } else {\n        KTUtil.scrollDestroy(element);\n      }\n    },\n\n    /**\n     * Update scroll menu\n    */\n    scrollUpdate: function scrollUpdate() {\n      if (the.options.scroll && the.options.scroll.height) {\n        KTUtil.scrollUpdate(element);\n      }\n    },\n\n    /**\n     * Scroll top\n    */\n    scrollTop: function scrollTop() {\n      if (the.options.scroll && the.options.scroll.height) {\n        KTUtil.scrollTop(element);\n      }\n    },\n\n    /**\n     * Get submenu mode for current breakpoint and menu state\n     * @returns {KTMenu}\n     */\n    getSubmenuMode: function getSubmenuMode(el) {\n      if (KTUtil.isInResponsiveRange('desktop')) {\n        if (el && KTUtil.hasAttr(el, 'data-ktmenu-submenu-toggle') && KTUtil.attr(el, 'data-ktmenu-submenu-toggle') == 'hover') {\n          return 'dropdown';\n        }\n\n        if (KTUtil.isset(the.options.submenu, 'desktop.state.body')) {\n          if (KTUtil.hasClasses(body, the.options.submenu.desktop.state.body)) {\n            return the.options.submenu.desktop.state.mode;\n          } else {\n            return the.options.submenu.desktop[\"default\"];\n          }\n        } else if (KTUtil.isset(the.options.submenu, 'desktop')) {\n          return the.options.submenu.desktop;\n        }\n      } else if (KTUtil.isInResponsiveRange('tablet') && KTUtil.isset(the.options.submenu, 'tablet')) {\n        return the.options.submenu.tablet;\n      } else if (KTUtil.isInResponsiveRange('mobile') && KTUtil.isset(the.options.submenu, 'mobile')) {\n        return the.options.submenu.mobile;\n      } else {\n        return false;\n      }\n    },\n\n    /**\n     * Get submenu mode for current breakpoint and menu state\n     * @returns {KTMenu}\n     */\n    isConditionalSubmenuDropdown: function isConditionalSubmenuDropdown() {\n      if (KTUtil.isInResponsiveRange('desktop') && KTUtil.isset(the.options.submenu, 'desktop.state.body')) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    /**\n     * Reset submenu attributes\n     * @returns {KTMenu}\n     */\n    resetSubmenuProps: function resetSubmenuProps(e) {\n      var submenus = KTUtil.findAll(element, '.kt-menu__submenu');\n\n      if (submenus) {\n        for (var i = 0, len = submenus.length; i < len; i++) {\n          KTUtil.css(submenus[0], 'display', '');\n          KTUtil.css(submenus[0], 'overflow', '');\n        }\n      }\n    },\n\n    /**\n     * Handles submenu hover toggle\n     * @returns {KTMenu}\n     */\n    handleSubmenuDrodownHoverEnter: function handleSubmenuDrodownHoverEnter(e) {\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n\n      if (the.resumeDropdownHover() === false) {\n        return;\n      }\n\n      var item = this;\n\n      if (item.getAttribute('data-hover') == '1') {\n        item.removeAttribute('data-hover');\n        clearTimeout(item.getAttribute('data-timeout'));\n        item.removeAttribute('data-timeout'); //Plugin.hideSubmenuDropdown(item, false);\n      } // console.log('test!');\n\n\n      Plugin.showSubmenuDropdown(item);\n    },\n\n    /**\n     * Handles submenu hover toggle\n     * @returns {KTMenu}\n     */\n    handleSubmenuDrodownHoverExit: function handleSubmenuDrodownHoverExit(e) {\n      if (the.resumeDropdownHover() === false) {\n        return;\n      }\n\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n\n      var item = this;\n      var time = the.options.dropdown.timeout;\n      var timeout = setTimeout(function () {\n        if (item.getAttribute('data-hover') == '1') {\n          Plugin.hideSubmenuDropdown(item, true);\n        }\n      }, time);\n      item.setAttribute('data-hover', '1');\n      item.setAttribute('data-timeout', timeout);\n    },\n\n    /**\n     * Handles submenu click toggle\n     * @returns {KTMenu}\n     */\n    handleSubmenuDropdownClick: function handleSubmenuDropdownClick(e) {\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n\n      var item = this.closest('.kt-menu__item');\n\n      if (item.getAttribute('data-ktmenu-submenu-mode') == 'accordion') {\n        return;\n      }\n\n      if (KTUtil.hasClass(item, 'kt-menu__item--hover') === false) {\n        KTUtil.addClass(item, 'kt-menu__item--open-dropdown');\n        Plugin.showSubmenuDropdown(item);\n      } else {\n        KTUtil.removeClass(item, 'kt-menu__item--open-dropdown');\n        Plugin.hideSubmenuDropdown(item, true);\n      }\n\n      e.preventDefault();\n    },\n\n    /**\n     * Handles tab click toggle\n     * @returns {KTMenu}\n     */\n    handleSubmenuDropdownTabClick: function handleSubmenuDropdownTabClick(e) {\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n\n      var item = this.closest('.kt-menu__item');\n\n      if (item.getAttribute('data-ktmenu-submenu-mode') == 'accordion') {\n        return;\n      }\n\n      if (KTUtil.hasClass(item, 'kt-menu__item--hover') == false) {\n        KTUtil.addClass(item, 'kt-menu__item--open-dropdown');\n        Plugin.showSubmenuDropdown(item);\n      }\n\n      e.preventDefault();\n    },\n\n    /**\n     * Handles link click\n     * @returns {KTMenu}\n     */\n    handleLinkClick: function handleLinkClick(e) {\n      var submenu = this.closest('.kt-menu__item.kt-menu__item--submenu'); //\n\n      var result = Plugin.eventTrigger('linkClick', this, e);\n\n      if (result === false) {\n        return;\n      }\n\n      if (submenu && Plugin.getSubmenuMode(submenu) === 'dropdown') {\n        Plugin.hideSubmenuDropdowns();\n      }\n    },\n\n    /**\n     * Handles submenu dropdown close on link click\n     * @returns {KTMenu}\n     */\n    handleSubmenuDropdownClose: function handleSubmenuDropdownClose(e, el) {\n      // exit if its not submenu dropdown mode\n      if (Plugin.getSubmenuMode(el) === 'accordion') {\n        return;\n      }\n\n      var shown = element.querySelectorAll('.kt-menu__item.kt-menu__item--submenu.kt-menu__item--hover:not(.kt-menu__item--tabs)'); // check if currently clicked link's parent item ha\n\n      if (shown.length > 0 && KTUtil.hasClass(el, 'kt-menu__toggle') === false && el.querySelectorAll('.kt-menu__toggle').length === 0) {\n        // close opened dropdown menus\n        for (var i = 0, len = shown.length; i < len; i++) {\n          Plugin.hideSubmenuDropdown(shown[0], true);\n        }\n      }\n    },\n\n    /**\n     * helper functions\n     * @returns {KTMenu}\n     */\n    handleSubmenuAccordion: function handleSubmenuAccordion(e, el) {\n      var query;\n      var item = el ? el : this;\n\n      if (Plugin.getSubmenuMode(el) === 'dropdown' && (query = item.closest('.kt-menu__item'))) {\n        if (query.getAttribute('data-ktmenu-submenu-mode') != 'accordion') {\n          e.preventDefault();\n          return;\n        }\n      }\n\n      var li = item.closest('.kt-menu__item');\n      var submenu = KTUtil.child(li, '.kt-menu__submenu, .kt-menu__inner');\n\n      if (KTUtil.hasClass(item.closest('.kt-menu__item'), 'kt-menu__item--open-always')) {\n        return;\n      }\n\n      if (li && submenu) {\n        e.preventDefault();\n        var speed = the.options.accordion.slideSpeed;\n        var hasClosables = false;\n\n        if (KTUtil.hasClass(li, 'kt-menu__item--open') === false) {\n          // hide other accordions\n          if (the.options.accordion.expandAll === false) {\n            var subnav = item.closest('.kt-menu__nav, .kt-menu__subnav');\n            var closables = KTUtil.children(subnav, '.kt-menu__item.kt-menu__item--open.kt-menu__item--submenu:not(.kt-menu__item--here):not(.kt-menu__item--open-always)');\n\n            if (subnav && closables) {\n              for (var i = 0, len = closables.length; i < len; i++) {\n                var el_ = closables[0];\n                var submenu_ = KTUtil.child(el_, '.kt-menu__submenu');\n\n                if (submenu_) {\n                  KTUtil.slideUp(submenu_, speed, function () {\n                    Plugin.scrollUpdate();\n                    KTUtil.removeClass(el_, 'kt-menu__item--open');\n                  });\n                }\n              }\n            }\n          }\n\n          KTUtil.slideDown(submenu, speed, function () {\n            Plugin.scrollToItem(item);\n            Plugin.scrollUpdate();\n            Plugin.eventTrigger('submenuToggle', submenu, e);\n          });\n          KTUtil.addClass(li, 'kt-menu__item--open');\n        } else {\n          KTUtil.slideUp(submenu, speed, function () {\n            Plugin.scrollToItem(item);\n            Plugin.eventTrigger('submenuToggle', submenu, e);\n          });\n          KTUtil.removeClass(li, 'kt-menu__item--open');\n        }\n      }\n    },\n\n    /**\n     * scroll to item function\n     * @returns {KTMenu}\n     */\n    scrollToItem: function scrollToItem(item) {\n      // handle auto scroll for accordion submenus\n      if (KTUtil.isInResponsiveRange('desktop') && the.options.accordion.autoScroll && element.getAttribute('data-ktmenu-scroll') !== '1') {\n        KTUtil.scrollTo(item, the.options.accordion.autoScrollSpeed);\n      }\n    },\n\n    /**\n     * Hide submenu dropdown\n     * @returns {KTMenu}\n     */\n    hideSubmenuDropdown: function hideSubmenuDropdown(item, classAlso) {\n      // remove submenu activation class\n      if (classAlso) {\n        KTUtil.removeClass(item, 'kt-menu__item--hover');\n        KTUtil.removeClass(item, 'kt-menu__item--active-tab');\n      } // clear timeout\n\n\n      item.removeAttribute('data-hover');\n\n      if (item.getAttribute('data-ktmenu-dropdown-toggle-class')) {\n        KTUtil.removeClass(body, item.getAttribute('data-ktmenu-dropdown-toggle-class'));\n      }\n\n      var timeout = item.getAttribute('data-timeout');\n      item.removeAttribute('data-timeout');\n      clearTimeout(timeout);\n    },\n\n    /**\n     * Hide submenu dropdowns\n     * @returns {KTMenu}\n     */\n    hideSubmenuDropdowns: function hideSubmenuDropdowns() {\n      var items;\n\n      if (items = element.querySelectorAll('.kt-menu__item--submenu.kt-menu__item--hover:not(.kt-menu__item--tabs):not([data-ktmenu-submenu-toggle=\"tab\"])')) {\n        for (var j = 0, cnt = items.length; j < cnt; j++) {\n          Plugin.hideSubmenuDropdown(items[j], true);\n        }\n      }\n    },\n\n    /**\n     * helper functions\n     * @returns {KTMenu}\n     */\n    showSubmenuDropdown: function showSubmenuDropdown(item) {\n      // close active submenus\n      var list = element.querySelectorAll('.kt-menu__item--submenu.kt-menu__item--hover, .kt-menu__item--submenu.kt-menu__item--active-tab');\n\n      if (list) {\n        for (var i = 0, len = list.length; i < len; i++) {\n          var el = list[i];\n\n          if (item !== el && el.contains(item) === false && item.contains(el) === false) {\n            Plugin.hideSubmenuDropdown(el, true);\n          }\n        }\n      } // add submenu activation class\n\n\n      KTUtil.addClass(item, 'kt-menu__item--hover');\n\n      if (item.getAttribute('data-ktmenu-dropdown-toggle-class')) {\n        KTUtil.addClass(body, item.getAttribute('data-ktmenu-dropdown-toggle-class'));\n      }\n    },\n\n    /**\n     * Handles submenu slide toggle\n     * @returns {KTMenu}\n     */\n    createSubmenuDropdownClickDropoff: function createSubmenuDropdownClickDropoff(el) {\n      var query;\n      var zIndex = (query = KTUtil.child(el, '.kt-menu__submenu') ? KTUtil.css(query, 'z-index') : 0) - 1;\n      var dropoff = document.createElement('<div class=\"kt-menu__dropoff\" style=\"background: transparent; position: fixed; top: 0; bottom: 0; left: 0; right: 0; z-index: ' + zIndex + '\"></div>');\n      body.appendChild(dropoff);\n      KTUtil.addEvent(dropoff, 'click', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        KTUtil.remove(this);\n        Plugin.hideSubmenuDropdown(el, true);\n      });\n    },\n\n    /**\n     * Handles submenu hover toggle\n     * @returns {KTMenu}\n     */\n    pauseDropdownHover: function pauseDropdownHover(time) {\n      var date = new Date();\n      the.pauseDropdownHoverTime = date.getTime() + time;\n    },\n\n    /**\n     * Handles submenu hover toggle\n     * @returns {KTMenu}\n     */\n    resumeDropdownHover: function resumeDropdownHover() {\n      var date = new Date();\n      return date.getTime() > the.pauseDropdownHoverTime ? true : false;\n    },\n\n    /**\n     * Reset menu's current active item\n     * @returns {KTMenu}\n     */\n    resetActiveItem: function resetActiveItem(item) {\n      var list;\n      var parents;\n      list = element.querySelectorAll('.kt-menu__item--active');\n\n      for (var i = 0, len = list.length; i < len; i++) {\n        var el = list[0];\n        KTUtil.removeClass(el, 'kt-menu__item--active');\n        KTUtil.hide(KTUtil.child(el, '.kt-menu__submenu'));\n        parents = KTUtil.parents(el, '.kt-menu__item--submenu') || [];\n\n        for (var i_ = 0, len_ = parents.length; i_ < len_; i_++) {\n          var el_ = parents[i];\n          KTUtil.removeClass(el_, 'kt-menu__item--open');\n          KTUtil.hide(KTUtil.child(el_, '.kt-menu__submenu'));\n        }\n      } // close open submenus\n\n\n      if (the.options.accordion.expandAll === false) {\n        if (list = element.querySelectorAll('.kt-menu__item--open')) {\n          for (var i = 0, len = list.length; i < len; i++) {\n            KTUtil.removeClass(parents[0], 'kt-menu__item--open');\n          }\n        }\n      }\n    },\n\n    /**\n     * Sets menu's active item\n     * @returns {KTMenu}\n     */\n    setActiveItem: function setActiveItem(item) {\n      // reset current active item\n      Plugin.resetActiveItem();\n      var parents = KTUtil.parents(item, '.kt-menu__item--submenu') || [];\n\n      for (var i = 0, len = parents.length; i < len; i++) {\n        KTUtil.addClass(KTUtil.get(parents[i]), 'kt-menu__item--open');\n      }\n\n      KTUtil.addClass(KTUtil.get(item), 'kt-menu__item--active');\n    },\n\n    /**\n     * Returns page breadcrumbs for the menu's active item\n     * @returns {KTMenu}\n     */\n    getBreadcrumbs: function getBreadcrumbs(item) {\n      var query;\n      var breadcrumbs = [];\n      var link = KTUtil.child(item, '.kt-menu__link');\n      breadcrumbs.push({\n        text: query = KTUtil.child(link, '.kt-menu__link-text') ? query.innerHTML : '',\n        title: link.getAttribute('title'),\n        href: link.getAttribute('href')\n      });\n      var parents = KTUtil.parents(item, '.kt-menu__item--submenu');\n\n      for (var i = 0, len = parents.length; i < len; i++) {\n        var submenuLink = KTUtil.child(parents[i], '.kt-menu__link');\n        breadcrumbs.push({\n          text: query = KTUtil.child(submenuLink, '.kt-menu__link-text') ? query.innerHTML : '',\n          title: submenuLink.getAttribute('title'),\n          href: submenuLink.getAttribute('href')\n        });\n      }\n\n      return breadcrumbs.reverse();\n    },\n\n    /**\n     * Returns page title for the menu's active item\n     * @returns {KTMenu}\n     */\n    getPageTitle: function getPageTitle(item) {\n      var query;\n      return query = KTUtil.child(item, '.kt-menu__link-text') ? query.innerHTML : '';\n    },\n\n    /**\n     * Trigger events\n     */\n    eventTrigger: function eventTrigger(name, target, e) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, target, e);\n            }\n          } else {\n            return event.handler.call(this, target, e);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    },\n    removeEvent: function removeEvent(name) {\n      if (the.events[name]) {\n        delete the.events[name];\n      }\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\n   * Set default options\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\n   * Update scroll\n   */\n\n\n  the.scrollUpdate = function () {\n    return Plugin.scrollUpdate();\n  };\n  /**\n   * Re-init scroll\n   */\n\n\n  the.scrollReInit = function () {\n    return Plugin.scrollInit();\n  };\n  /**\n   * Scroll top\n   */\n\n\n  the.scrollTop = function () {\n    return Plugin.scrollTop();\n  };\n  /**\n   * Set active menu item\n   */\n\n\n  the.setActiveItem = function (item) {\n    return Plugin.setActiveItem(item);\n  };\n\n  the.reload = function () {\n    return Plugin.reload();\n  };\n\n  the.update = function (options) {\n    return Plugin.update(options);\n  };\n  /**\n   * Set breadcrumb for menu item\n   */\n\n\n  the.getBreadcrumbs = function (item) {\n    return Plugin.getBreadcrumbs(item);\n  };\n  /**\n   * Set page title for menu item\n   */\n\n\n  the.getPageTitle = function (item) {\n    return Plugin.getPageTitle(item);\n  };\n  /**\n   * Get submenu mode\n   */\n\n\n  the.getSubmenuMode = function (el) {\n    return Plugin.getSubmenuMode(el);\n  };\n  /**\n   * Hide dropdown\n   * @returns {Object}\n   */\n\n\n  the.hideDropdown = function (item) {\n    Plugin.hideSubmenuDropdown(item, true);\n  };\n  /**\n   * Hide dropdowns\n   * @returns {Object}\n   */\n\n\n  the.hideDropdowns = function () {\n    Plugin.hideSubmenuDropdowns();\n  };\n  /**\n   * Disable menu for given time\n   * @returns {Object}\n   */\n\n\n  the.pauseDropdownHover = function (time) {\n    Plugin.pauseDropdownHover(time);\n  };\n  /**\n   * Disable menu for given time\n   * @returns {Object}\n   */\n\n\n  the.resumeDropdownHover = function () {\n    return Plugin.resumeDropdownHover();\n  };\n  /**\n   * Register event\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n\n  the.off = function (name) {\n    return Plugin.removeEvent(name);\n  };\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n  // Run plugin\n\n\n  Plugin.construct.apply(the, [options]); // Handle plugin on window resize\n\n  KTUtil.addResizeHandler(function () {\n    if (init) {\n      the.reload();\n    }\n  }); // Init done\n\n  init = true; // Return plugin instance\n\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTMenu;\n} // Plugin global lazy initialization\n\n\ndocument.addEventListener(\"click\", function (e) {\n  var body = KTUtil.get('body');\n  var query;\n\n  if (query = body.querySelectorAll('.kt-menu__nav .kt-menu__item.kt-menu__item--submenu.kt-menu__item--hover:not(.kt-menu__item--tabs)[data-ktmenu-submenu-toggle=\"click\"]')) {\n    for (var i = 0, len = query.length; i < len; i++) {\n      var element = query[i].closest('.kt-menu__nav').parentNode;\n\n      if (element) {\n        var the = KTUtil.data(element).get('menu');\n\n        if (!the) {\n          break;\n        }\n\n        if (!the || the.getSubmenuMode() !== 'dropdown') {\n          break;\n        }\n\n        if (e.target !== element && element.contains(e.target) === false) {\n          the.hideDropdowns();\n        }\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/theme/core/base/menu.js\n");

/***/ }),

/***/ "./resources/js/theme/core/base/offcanvas.js":
/*!***************************************************!*\
  !*** ./resources/js/theme/core/base/offcanvas.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTOffcanvas = function KTOffcanvas(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.get(elementId);\n  var body = KTUtil.get('body');\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {}; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('offcanvas')) {\n        the = KTUtil.data(element).get('offcanvas');\n      } else {\n        // reset offcanvas\n        Plugin.init(options); // build offcanvas\n\n        Plugin.build();\n        KTUtil.data(element).set('offcanvas', the);\n      }\n\n      return the;\n    },\n    init: function init(options) {\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.overlay;\n      the.classBase = the.options.baseClass;\n      the.classShown = the.classBase + '--on';\n      the.classOverlay = the.classBase + '-overlay';\n      the.state = KTUtil.hasClass(element, the.classShown) ? 'shown' : 'hidden';\n    },\n    build: function build() {\n      // offcanvas toggle\n      if (the.options.toggleBy) {\n        if (typeof the.options.toggleBy === 'string') {\n          KTUtil.addEvent(the.options.toggleBy, 'click', function (e) {\n            e.preventDefault();\n            Plugin.toggle();\n          });\n        } else if (the.options.toggleBy && the.options.toggleBy[0]) {\n          if (the.options.toggleBy[0].target) {\n            for (var i in the.options.toggleBy) {\n              KTUtil.addEvent(the.options.toggleBy[i].target, 'click', function (e) {\n                e.preventDefault();\n                Plugin.toggle();\n              });\n            }\n          } else {\n            for (var i in the.options.toggleBy) {\n              KTUtil.addEvent(the.options.toggleBy[i], 'click', function (e) {\n                e.preventDefault();\n                Plugin.toggle();\n              });\n            }\n          }\n        } else if (the.options.toggleBy && the.options.toggleBy.target) {\n          KTUtil.addEvent(the.options.toggleBy.target, 'click', function (e) {\n            e.preventDefault();\n            Plugin.toggle();\n          });\n        }\n      } // offcanvas close\n\n\n      var closeBy = KTUtil.get(the.options.closeBy);\n\n      if (closeBy) {\n        KTUtil.addEvent(closeBy, 'click', function (e) {\n          e.preventDefault();\n          Plugin.hide();\n        });\n      } // Window resize\n\n\n      KTUtil.addResizeHandler(function () {\n        if (parseInt(KTUtil.css(element, 'left')) >= 0 || parseInt(KTUtil.css(element, 'right') >= 0) || KTUtil.css(element, 'position') != 'fixed') {\n          KTUtil.css(element, 'opacity', '1');\n        }\n      });\n    },\n    isShown: function isShown(target) {\n      return the.state == 'shown' ? true : false;\n    },\n    toggle: function toggle() {\n      ;\n      Plugin.eventTrigger('toggle');\n\n      if (the.state == 'shown') {\n        Plugin.hide(this);\n      } else {\n        Plugin.show(this);\n      }\n    },\n    show: function show(target) {\n      if (the.state == 'shown') {\n        return;\n      }\n\n      Plugin.eventTrigger('beforeShow');\n      Plugin.togglerClass(target, 'show'); // Offcanvas panel\n\n      KTUtil.addClass(body, the.classShown);\n      KTUtil.addClass(element, the.classShown);\n      KTUtil.css(element, 'opacity', '1');\n      the.state = 'shown';\n\n      if (the.options.overlay) {\n        the.overlay = KTUtil.insertAfter(document.createElement('DIV'), element);\n        KTUtil.addClass(the.overlay, the.classOverlay);\n        KTUtil.addEvent(the.overlay, 'click', function (e) {\n          e.stopPropagation();\n          e.preventDefault();\n          Plugin.hide(target);\n        });\n      }\n\n      Plugin.eventTrigger('afterShow');\n    },\n    hide: function hide(target) {\n      if (the.state == 'hidden') {\n        return;\n      }\n\n      Plugin.eventTrigger('beforeHide');\n      Plugin.togglerClass(target, 'hide');\n      KTUtil.removeClass(body, the.classShown);\n      KTUtil.removeClass(element, the.classShown);\n      the.state = 'hidden';\n\n      if (the.options.overlay && the.overlay) {\n        KTUtil.remove(the.overlay);\n      }\n\n      KTUtil.transitionEnd(element, function () {\n        KTUtil.css(element, 'opacity', '0');\n      });\n      Plugin.eventTrigger('afterHide');\n    },\n    togglerClass: function togglerClass(target, mode) {\n      // Toggler\n      var id = KTUtil.attr(target, 'id');\n      var toggleBy;\n\n      if (the.options.toggleBy && the.options.toggleBy[0] && the.options.toggleBy[0].target) {\n        for (var i in the.options.toggleBy) {\n          if (the.options.toggleBy[i].target === id) {\n            toggleBy = the.options.toggleBy[i];\n          }\n        }\n      } else if (the.options.toggleBy && the.options.toggleBy.target) {\n        toggleBy = the.options.toggleBy;\n      }\n\n      if (toggleBy) {\n        var el = KTUtil.get(toggleBy.target);\n\n        if (mode === 'show') {\n          KTUtil.addClass(el, toggleBy.state);\n        }\n\n        if (mode === 'hide') {\n          KTUtil.removeClass(el, toggleBy.state);\n        }\n      }\n    },\n    eventTrigger: function eventTrigger(name, args) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the, args);\n            }\n          } else {\n            return event.handler.call(this, the, args);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n\n  the.isShown = function () {\n    return Plugin.isShown();\n  };\n\n  the.hide = function () {\n    return Plugin.hide();\n  };\n\n  the.show = function () {\n    return Plugin.show();\n  };\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n  // Run plugin\n\n\n  Plugin.construct.apply(the, [options]); // Init done\n\n  init = true; // Return plugin instance\n\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTOffcanvas;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/theme/core/base/offcanvas.js\n");

/***/ }),

/***/ "./resources/js/theme/core/base/scrolltop.js":
/*!***************************************************!*\
  !*** ./resources/js/theme/core/base/scrolltop.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTScrolltop = function KTScrolltop(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.get(elementId);\n  var body = KTUtil.get('body');\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    offset: 300,\n    speed: 600,\n    toggleClass: 'kt-scrolltop--on'\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\n     * Run plugin\n     * @returns {mscrolltop}\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('scrolltop')) {\n        the = KTUtil.data(element).get('scrolltop');\n      } else {\n        // reset scrolltop\n        Plugin.init(options); // build scrolltop\n\n        Plugin.build();\n        KTUtil.data(element).set('scrolltop', the);\n      }\n\n      return the;\n    },\n\n    /**\n     * Handles subscrolltop click toggle\n     * @returns {mscrolltop}\n     */\n    init: function init(options) {\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    },\n    build: function build() {\n      // handle window scroll\n      if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {\n        window.addEventListener('touchend', function () {\n          Plugin.handle();\n        });\n        window.addEventListener('touchcancel', function () {\n          Plugin.handle();\n        });\n        window.addEventListener('touchleave', function () {\n          Plugin.handle();\n        });\n      } else {\n        window.addEventListener('scroll', function () {\n          Plugin.handle();\n        });\n      } // handle button click \n\n\n      KTUtil.addEvent(element, 'click', Plugin.scroll);\n    },\n\n    /**\n     * Handles scrolltop click scrollTop\n     */\n    handle: function handle() {\n      var pos = window.pageYOffset; // current vertical position\n\n      if (pos > the.options.offset) {\n        KTUtil.addClass(body, the.options.toggleClass);\n      } else {\n        KTUtil.removeClass(body, the.options.toggleClass);\n      }\n    },\n\n    /**\n     * Handles scrolltop click scrollTop\n     */\n    scroll: function scroll(e) {\n      e.preventDefault();\n      KTUtil.scrollTop(0, the.options.speed);\n    },\n\n    /**\n     * Trigger events\n     */\n    eventTrigger: function eventTrigger(name, args) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the, args);\n            }\n          } else {\n            return event.handler.call(this, the, args);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\n   * Set default options \n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\n   * Get subscrolltop mode\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\n   * Set scrolltop content\n   * @returns {mscrolltop}\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n  // Run plugin\n\n\n  Plugin.construct.apply(the, [options]); // Init done\n\n  init = true; // Return plugin instance\n\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTScrolltop;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/theme/core/base/scrolltop.js\n");

/***/ }),

/***/ "./resources/js/theme/core/base/toggle.js":
/*!************************************************!*\
  !*** ./resources/js/theme/core/base/toggle.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // plugin setup\n\nvar KTToggle = function KTToggle(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.get(elementId);\n  var body = KTUtil.get('body');\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    togglerState: '',\n    targetState: ''\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\n     * Construct\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('toggle')) {\n        the = KTUtil.data(element).get('toggle');\n      } else {\n        // reset menu\n        Plugin.init(options); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('toggle', the);\n      }\n\n      return the;\n    },\n\n    /**\n     * Handles subtoggle click toggle\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.target = KTUtil.get(the.options.target);\n      the.targetState = the.options.targetState;\n      the.togglerState = the.options.togglerState;\n      the.state = KTUtil.hasClasses(the.target, the.targetState) ? 'on' : 'off';\n    },\n\n    /**\n     * Setup toggle\n     */\n    build: function build() {\n      KTUtil.addEvent(element, 'mouseup', Plugin.toggle);\n    },\n\n    /**\n     * Handles offcanvas click toggle\n     */\n    toggle: function toggle(e) {\n      Plugin.eventTrigger('beforeToggle');\n\n      if (the.state == 'off') {\n        Plugin.toggleOn();\n      } else {\n        Plugin.toggleOff();\n      }\n\n      Plugin.eventTrigger('afterToggle');\n      e.preventDefault();\n      return the;\n    },\n\n    /**\n     * Handles toggle click toggle\n     */\n    toggleOn: function toggleOn() {\n      Plugin.eventTrigger('beforeOn');\n      KTUtil.addClass(the.target, the.targetState);\n\n      if (the.togglerState) {\n        KTUtil.addClass(element, the.togglerState);\n      }\n\n      the.state = 'on';\n      Plugin.eventTrigger('afterOn');\n      Plugin.eventTrigger('toggle');\n      return the;\n    },\n\n    /**\n     * Handles toggle click toggle\n     */\n    toggleOff: function toggleOff() {\n      Plugin.eventTrigger('beforeOff');\n      KTUtil.removeClass(the.target, the.targetState);\n\n      if (the.togglerState) {\n        KTUtil.removeClass(element, the.togglerState);\n      }\n\n      the.state = 'off';\n      Plugin.eventTrigger('afterOff');\n      Plugin.eventTrigger('toggle');\n      return the;\n    },\n\n    /**\n     * Trigger events\n     */\n    eventTrigger: function eventTrigger(name) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\n   * Set default options \n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\n   * Get toggle state \n   */\n\n\n  the.getState = function () {\n    return the.state;\n  };\n  /**\n   * Toggle \n   */\n\n\n  the.toggle = function () {\n    return Plugin.toggle();\n  };\n  /**\n   * Toggle on \n   */\n\n\n  the.toggleOn = function () {\n    return Plugin.toggleOn();\n  };\n  /**\n   * Toggle off \n   */\n\n\n  the.toggleOff = function () {\n    return Plugin.toggleOff();\n  };\n  /**\n   * Attach event\n   * @returns {KTToggle}\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\n   * Attach event that will be fired once\n   * @returns {KTToggle}\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTToggle;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvdGhlbWUvY29yZS9iYXNlL3RvZ2dsZS5qcz9hYTcxIl0sIm5hbWVzIjpbIktUVG9nZ2xlIiwidGhlIiwiaW5pdCIsImVsZW1lbnQiLCJLVFV0aWwiLCJib2R5IiwiZGVmYXVsdE9wdGlvbnMiLCJ0b2dnbGVyU3RhdGUiLCJ0YXJnZXRTdGF0ZSIsIlBsdWdpbiIsImNvbnN0cnVjdCIsImJ1aWxkIiwidG9nZ2xlIiwiZSIsInRvZ2dsZU9uIiwidG9nZ2xlT2ZmIiwiZXZlbnRUcmlnZ2VyIiwiaSIsImV2ZW50IiwiYWRkRXZlbnQiLCJuYW1lIiwiaGFuZGxlciIsIm9uZSIsImZpcmVkIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQ0FFQTs7QUFDQSxJQUFJQSxRQUFRLEdBQUcsU0FBWEEsUUFBVyxxQkFBNkI7QUFDeEM7QUFDQSxNQUFJQyxHQUFHLEdBQVA7QUFDQSxNQUFJQyxJQUFJLEdBSGdDLEtBR3hDLENBSHdDLENBS3hDOztBQUNBLE1BQUlDLE9BQU8sR0FBR0MsTUFBTSxDQUFOQSxJQUFkLFNBQWNBLENBQWQ7QUFDQSxNQUFJQyxJQUFJLEdBQUdELE1BQU0sQ0FBTkEsSUFBWCxNQUFXQSxDQUFYOztBQUVBLE1BQUksQ0FBSixTQUFjO0FBQ1Y7QUFWb0MsSUFheEM7OztBQUNBLE1BQUlFLGNBQWMsR0FBRztBQUNqQkMsZ0JBQVksRUFESztBQUVqQkMsZUFBVyxFQUFFO0FBRkksR0FBckIsQ0Fkd0MsQ0FtQnhDO0FBQ0E7QUFDQTs7QUFFQSxNQUFJQyxNQUFNLEdBQUc7QUFDVDtBQUNSO0FBQ0E7QUFFUUMsYUFBUyxFQUFFLDRCQUFrQjtBQUN6QixVQUFJTixNQUFNLENBQU5BLGtCQUFKLFFBQUlBLENBQUosRUFBd0M7QUFDcENILFdBQUcsR0FBR0csTUFBTSxDQUFOQSxrQkFBTkgsUUFBTUcsQ0FBTkg7QUFESixhQUVPO0FBQ0g7QUFDQVEsY0FBTSxDQUFOQSxLQUZHLE9BRUhBLEVBRkcsQ0FJSDs7QUFDQUEsY0FBTSxDQUFOQTtBQUVBTCxjQUFNLENBQU5BO0FBQ0g7O0FBRUQ7QUFsQks7O0FBcUJUO0FBQ1I7QUFDQTtBQUNRRixRQUFJLEVBQUUsdUJBQWtCO0FBQ3BCRCxTQUFHLENBQUhBO0FBQ0FBLFNBQUcsQ0FBSEEsU0FGb0IsRUFFcEJBLENBRm9CLENBSXBCOztBQUNBQSxTQUFHLENBQUhBLFVBQWNHLE1BQU0sQ0FBTkEsK0JBQWRILE9BQWNHLENBQWRIO0FBRUFBLFNBQUcsQ0FBSEEsU0FBYUcsTUFBTSxDQUFOQSxJQUFXSCxHQUFHLENBQUhBLFFBQXhCQSxNQUFhRyxDQUFiSDtBQUNBQSxTQUFHLENBQUhBLGNBQWtCQSxHQUFHLENBQUhBLFFBQWxCQTtBQUNBQSxTQUFHLENBQUhBLGVBQW1CQSxHQUFHLENBQUhBLFFBQW5CQTtBQUVBQSxTQUFHLENBQUhBLFFBQVlHLE1BQU0sQ0FBTkEsV0FBa0JILEdBQUcsQ0FBckJHLFFBQThCSCxHQUFHLENBQWpDRyxzQkFBWkg7QUFuQ0s7O0FBc0NUO0FBQ1I7QUFDQTtBQUNRVSxTQUFLLEVBQUUsaUJBQVc7QUFDZFAsWUFBTSxDQUFOQSw2QkFBb0NLLE1BQU0sQ0FBMUNMO0FBMUNLOztBQTZDVDtBQUNSO0FBQ0E7QUFDUVEsVUFBTSxFQUFFLG1CQUFZO0FBQ2hCSCxZQUFNLENBQU5BOztBQUVBLFVBQUlSLEdBQUcsQ0FBSEEsU0FBSixPQUF3QjtBQUNwQlEsY0FBTSxDQUFOQTtBQURKLGFBRU87QUFDSEEsY0FBTSxDQUFOQTtBQUNIOztBQUVEQSxZQUFNLENBQU5BO0FBRUFJLE9BQUMsQ0FBREE7QUFFQTtBQTdESzs7QUFnRVQ7QUFDUjtBQUNBO0FBQ1FDLFlBQVEsRUFBRSxvQkFBVztBQUNqQkwsWUFBTSxDQUFOQTtBQUVBTCxZQUFNLENBQU5BLFNBQWdCSCxHQUFHLENBQW5CRyxRQUE0QkgsR0FBRyxDQUEvQkc7O0FBRUEsVUFBSUgsR0FBRyxDQUFQLGNBQXNCO0FBQ2xCRyxjQUFNLENBQU5BLGtCQUF5QkgsR0FBRyxDQUE1Qkc7QUFDSDs7QUFFREgsU0FBRyxDQUFIQTtBQUVBUSxZQUFNLENBQU5BO0FBRUFBLFlBQU0sQ0FBTkE7QUFFQTtBQWxGSzs7QUFxRlQ7QUFDUjtBQUNBO0FBQ1FNLGFBQVMsRUFBRSxxQkFBVztBQUNsQk4sWUFBTSxDQUFOQTtBQUVBTCxZQUFNLENBQU5BLFlBQW1CSCxHQUFHLENBQXRCRyxRQUErQkgsR0FBRyxDQUFsQ0c7O0FBRUEsVUFBSUgsR0FBRyxDQUFQLGNBQXNCO0FBQ2xCRyxjQUFNLENBQU5BLHFCQUE0QkgsR0FBRyxDQUEvQkc7QUFDSDs7QUFFREgsU0FBRyxDQUFIQTtBQUVBUSxZQUFNLENBQU5BO0FBRUFBLFlBQU0sQ0FBTkE7QUFFQTtBQXZHSzs7QUEwR1Q7QUFDUjtBQUNBO0FBQ1FPLGdCQUFZLEVBQUUsNEJBQWU7QUFDekIsV0FBSyxJQUFJQyxDQUFDLEdBQVYsR0FBZ0JBLENBQUMsR0FBR2hCLEdBQUcsQ0FBSEEsT0FBcEIsUUFBdUNnQixDQUF2QyxJQUE0QztBQUN4QyxZQUFJQyxLQUFLLEdBQUdqQixHQUFHLENBQUhBLE9BQVosQ0FBWUEsQ0FBWjs7QUFFQSxZQUFJaUIsS0FBSyxDQUFMQSxRQUFKLE1BQXdCO0FBQ3BCLGNBQUlBLEtBQUssQ0FBTEEsT0FBSixNQUF1QjtBQUNuQixnQkFBSUEsS0FBSyxDQUFMQSxTQUFKLE9BQTBCO0FBQ3RCakIsaUJBQUcsQ0FBSEE7QUFDQSxxQkFBT2lCLEtBQUssQ0FBTEEsbUJBQVAsR0FBT0EsQ0FBUDtBQUNIO0FBSkwsaUJBS087QUFDSCxtQkFBT0EsS0FBSyxDQUFMQSxtQkFBUCxHQUFPQSxDQUFQO0FBQ0g7QUFDSjtBQUNKO0FBM0hJO0FBOEhUQyxZQUFRLEVBQUUsc0NBQTZCO0FBQ25DbEIsU0FBRyxDQUFIQSxZQUFnQjtBQUNabUIsWUFBSSxFQURRO0FBRVpDLGVBQU8sRUFGSztBQUdaQyxXQUFHLEVBSFM7QUFJWkMsYUFBSyxFQUFFO0FBSkssT0FBaEJ0QjtBQU9BO0FBQ0g7QUF2SVEsR0FBYixDQXZCd0MsQ0FpS3hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNKO0FBQ0E7O0FBRUlBLEtBQUcsQ0FBSEEsY0FBa0IsbUJBQWtCO0FBQ2hDSyxrQkFBYyxHQUFkQTtBQURKTDtBQUlBO0FBQ0o7QUFDQTs7O0FBQ0lBLEtBQUcsQ0FBSEEsV0FBZSxZQUFXO0FBQ3RCLFdBQU9BLEdBQUcsQ0FBVjtBQURKQTtBQUlBO0FBQ0o7QUFDQTs7O0FBQ0lBLEtBQUcsQ0FBSEEsU0FBYSxZQUFXO0FBQ3BCLFdBQU9RLE1BQU0sQ0FBYixNQUFPQSxFQUFQO0FBREpSO0FBSUE7QUFDSjtBQUNBOzs7QUFDSUEsS0FBRyxDQUFIQSxXQUFlLFlBQVc7QUFDdEIsV0FBT1EsTUFBTSxDQUFiLFFBQU9BLEVBQVA7QUFESlI7QUFJQTtBQUNKO0FBQ0E7OztBQUNJQSxLQUFHLENBQUhBLFlBQWdCLFlBQVc7QUFDdkIsV0FBT1EsTUFBTSxDQUFiLFNBQU9BLEVBQVA7QUFESlI7QUFJQTtBQUNKO0FBQ0E7QUFDQTs7O0FBQ0lBLEtBQUcsQ0FBSEEsS0FBUyx5QkFBd0I7QUFDN0IsV0FBT1EsTUFBTSxDQUFOQSxlQUFQLE9BQU9BLENBQVA7QUFESlI7QUFJQTtBQUNKO0FBQ0E7QUFDQTs7O0FBQ0lBLEtBQUcsQ0FBSEEsTUFBVSx5QkFBd0I7QUFDOUIsV0FBT1EsTUFBTSxDQUFOQSx3QkFBUCxJQUFPQSxDQUFQO0FBdE5vQyxHQXFOeENSLENBck53QyxDQXlOeEM7OztBQUNBUSxRQUFNLENBQU5BLHFCQUE0QixDQUE1QkEsT0FBNEIsQ0FBNUJBO0FBRUE7QUE1TkosRSxDQStOQTs7O0FBQ0EsSUFBSSxTQUFpQyxPQUFPZSxNQUFNLENBQWIsWUFBckMsYUFBNEU7QUFDeEVBLFFBQU0sQ0FBTkE7QUFDSCIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy90aGVtZS9jb3JlL2Jhc2UvdG9nZ2xlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIHBsdWdpbiBzZXR1cFxudmFyIEtUVG9nZ2xlID0gZnVuY3Rpb24oZWxlbWVudElkLCBvcHRpb25zKSB7XG4gICAgLy8gTWFpbiBvYmplY3RcbiAgICB2YXIgdGhlID0gdGhpcztcbiAgICB2YXIgaW5pdCA9IGZhbHNlO1xuXG4gICAgLy8gR2V0IGVsZW1lbnQgb2JqZWN0XG4gICAgdmFyIGVsZW1lbnQgPSBLVFV0aWwuZ2V0KGVsZW1lbnRJZCk7XG4gICAgdmFyIGJvZHkgPSBLVFV0aWwuZ2V0KCdib2R5Jyk7ICBcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBvcHRpb25zXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICB0b2dnbGVyU3RhdGU6ICcnLFxuICAgICAgICB0YXJnZXRTdGF0ZTogJydcbiAgICB9OyAgICBcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyAqKiBQcml2YXRlIE1ldGhvZHMgICoqIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgdmFyIFBsdWdpbiA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdFxuICAgICAgICAgKi9cblxuICAgICAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChLVFV0aWwuZGF0YShlbGVtZW50KS5oYXMoJ3RvZ2dsZScpKSB7XG4gICAgICAgICAgICAgICAgdGhlID0gS1RVdGlsLmRhdGEoZWxlbWVudCkuZ2V0KCd0b2dnbGUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgbWVudVxuICAgICAgICAgICAgICAgIFBsdWdpbi5pbml0KG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgbWVudVxuICAgICAgICAgICAgICAgIFBsdWdpbi5idWlsZCgpO1xuXG4gICAgICAgICAgICAgICAgS1RVdGlsLmRhdGEoZWxlbWVudCkuc2V0KCd0b2dnbGUnLCB0aGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIYW5kbGVzIHN1YnRvZ2dsZSBjbGljayB0b2dnbGVcbiAgICAgICAgICovXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoZS5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgIHRoZS5ldmVudHMgPSBbXTtcblxuICAgICAgICAgICAgLy8gbWVyZ2UgZGVmYXVsdCBhbmQgdXNlciBkZWZpbmVkIG9wdGlvbnNcbiAgICAgICAgICAgIHRoZS5vcHRpb25zID0gS1RVdGlsLmRlZXBFeHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgdGhlLnRhcmdldCA9IEtUVXRpbC5nZXQodGhlLm9wdGlvbnMudGFyZ2V0KTtcbiAgICAgICAgICAgIHRoZS50YXJnZXRTdGF0ZSA9IHRoZS5vcHRpb25zLnRhcmdldFN0YXRlO1xuICAgICAgICAgICAgdGhlLnRvZ2dsZXJTdGF0ZSA9IHRoZS5vcHRpb25zLnRvZ2dsZXJTdGF0ZTtcblxuICAgICAgICAgICAgdGhlLnN0YXRlID0gS1RVdGlsLmhhc0NsYXNzZXModGhlLnRhcmdldCwgdGhlLnRhcmdldFN0YXRlKSA/ICdvbicgOiAnb2ZmJztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0dXAgdG9nZ2xlXG4gICAgICAgICAqL1xuICAgICAgICBidWlsZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQoZWxlbWVudCwgJ21vdXNldXAnLCBQbHVnaW4udG9nZ2xlKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIYW5kbGVzIG9mZmNhbnZhcyBjbGljayB0b2dnbGVcbiAgICAgICAgICovXG4gICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignYmVmb3JlVG9nZ2xlJyk7XG5cbiAgICAgICAgICAgIGlmICh0aGUuc3RhdGUgPT0gJ29mZicpIHtcbiAgICAgICAgICAgICAgICBQbHVnaW4udG9nZ2xlT24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgUGx1Z2luLnRvZ2dsZU9mZigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlclRvZ2dsZScpO1xuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgdG9nZ2xlIGNsaWNrIHRvZ2dsZVxuICAgICAgICAgKi9cbiAgICAgICAgdG9nZ2xlT246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignYmVmb3JlT24nKTtcblxuICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKHRoZS50YXJnZXQsIHRoZS50YXJnZXRTdGF0ZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGUudG9nZ2xlclN0YXRlKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGVsZW1lbnQsIHRoZS50b2dnbGVyU3RhdGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGUuc3RhdGUgPSAnb24nO1xuXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlck9uJyk7XG5cbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ3RvZ2dsZScpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIYW5kbGVzIHRvZ2dsZSBjbGljayB0b2dnbGVcbiAgICAgICAgICovXG4gICAgICAgIHRvZ2dsZU9mZjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdiZWZvcmVPZmYnKTtcblxuICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKHRoZS50YXJnZXQsIHRoZS50YXJnZXRTdGF0ZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGUudG9nZ2xlclN0YXRlKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGVsZW1lbnQsIHRoZS50b2dnbGVyU3RhdGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGUuc3RhdGUgPSAnb2ZmJztcblxuICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignYWZ0ZXJPZmYnKTtcblxuICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcigndG9nZ2xlJyk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyaWdnZXIgZXZlbnRzXG4gICAgICAgICAqL1xuICAgICAgICBldmVudFRyaWdnZXI6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhlLmV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IHRoZS5ldmVudHNbaV07XG5cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5vbmUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmZpcmVkID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlLmV2ZW50c1tpXS5maXJlZCA9IHRydWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhZGRFdmVudDogZnVuY3Rpb24obmFtZSwgaGFuZGxlciwgb25lKSB7XG4gICAgICAgICAgICB0aGUuZXZlbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgICAgICAgICBvbmU6IG9uZSxcbiAgICAgICAgICAgICAgICBmaXJlZDogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gKiogUHVibGljIE1ldGhvZHMgKiogLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgLyoqXG4gICAgICogU2V0IGRlZmF1bHQgb3B0aW9ucyBcbiAgICAgKi9cblxuICAgIHRoZS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgZGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdG9nZ2xlIHN0YXRlIFxuICAgICAqL1xuICAgIHRoZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhlLnN0YXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgXG4gICAgICovXG4gICAgdGhlLnRvZ2dsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUGx1Z2luLnRvZ2dsZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgb24gXG4gICAgICovXG4gICAgdGhlLnRvZ2dsZU9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4udG9nZ2xlT24oKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIG9mZiBcbiAgICAgKi9cbiAgICB0aGUudG9nZ2xlT2ZmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4udG9nZ2xlT2ZmKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEF0dGFjaCBldmVudFxuICAgICAqIEByZXR1cm5zIHtLVFRvZ2dsZX1cbiAgICAgKi9cbiAgICB0aGUub24gPSBmdW5jdGlvbihuYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4uYWRkRXZlbnQobmFtZSwgaGFuZGxlcik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEF0dGFjaCBldmVudCB0aGF0IHdpbGwgYmUgZmlyZWQgb25jZVxuICAgICAqIEByZXR1cm5zIHtLVFRvZ2dsZX1cbiAgICAgKi9cbiAgICB0aGUub25lID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIsIHRydWUpO1xuICAgIH07XG5cbiAgICAvLyBDb25zdHJ1Y3QgcGx1Z2luXG4gICAgUGx1Z2luLmNvbnN0cnVjdC5hcHBseSh0aGUsIFtvcHRpb25zXSk7XG5cbiAgICByZXR1cm4gdGhlO1xufTtcblxuLy8gd2VicGFjayBzdXBwb3J0XG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gS1RUb2dnbGU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/theme/core/base/toggle.js\n");

/***/ }),

/***/ "./resources/js/theme/core/layout/offcanvas-panel.js":
/*!***********************************************************!*\
  !*** ./resources/js/theme/core/layout/offcanvas-panel.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTOffcanvasPanel = function () {\n  var notificationPanel;\n  var quickActionsPanel;\n  var profilePanel;\n  var searchPanel;\n\n  var initNotifications = function initNotifications() {\n    var head = KTUtil.find(notificationPanel, '.kt-offcanvas-panel__head');\n    var body = KTUtil.find(notificationPanel, '.kt-offcanvas-panel__body');\n    var offcanvas = new KTOffcanvas(notificationPanel, {\n      overlay: true,\n      baseClass: 'kt-offcanvas-panel',\n      closeBy: 'kt_offcanvas_toolbar_notifications_close',\n      toggleBy: 'kt_offcanvas_toolbar_notifications_toggler_btn'\n    });\n    KTUtil.scrollInit(body, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (head) {\n          height = height - parseInt(KTUtil.actualHeight(head));\n          height = height - parseInt(KTUtil.css(head, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(notificationPanel, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(notificationPanel, 'paddingBottom'));\n        return height;\n      }\n    });\n  };\n\n  var initQucikActions = function initQucikActions() {\n    var head = KTUtil.find(quickActionsPanel, '.kt-offcanvas-panel__head');\n    var body = KTUtil.find(quickActionsPanel, '.kt-offcanvas-panel__body');\n    var offcanvas = new KTOffcanvas(quickActionsPanel, {\n      overlay: true,\n      baseClass: 'kt-offcanvas-panel',\n      closeBy: 'kt_offcanvas_toolbar_quick_actions_close',\n      toggleBy: 'kt_offcanvas_toolbar_quick_actions_toggler_btn'\n    });\n    KTUtil.scrollInit(body, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (head) {\n          height = height - parseInt(KTUtil.actualHeight(head));\n          height = height - parseInt(KTUtil.css(head, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(quickActionsPanel, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(quickActionsPanel, 'paddingBottom'));\n        return height;\n      }\n    });\n  };\n\n  var initProfile = function initProfile() {\n    var head = KTUtil.find(profilePanel, '.kt-offcanvas-panel__head');\n    var body = KTUtil.find(profilePanel, '.kt-offcanvas-panel__body');\n    var offcanvas = new KTOffcanvas(profilePanel, {\n      overlay: true,\n      baseClass: 'kt-offcanvas-panel',\n      closeBy: 'kt_offcanvas_toolbar_profile_close',\n      toggleBy: 'kt_offcanvas_toolbar_profile_toggler_btn'\n    });\n    KTUtil.scrollInit(body, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (head) {\n          height = height - parseInt(KTUtil.actualHeight(head));\n          height = height - parseInt(KTUtil.css(head, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(profilePanel, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(profilePanel, 'paddingBottom'));\n        return height;\n      }\n    });\n  };\n\n  var initSearch = function initSearch() {\n    var head = KTUtil.find(searchPanel, '.kt-offcanvas-panel__head');\n    var body = KTUtil.find(searchPanel, '.kt-offcanvas-panel__body');\n    var search = KTUtil.get('kt_quick_search_offcanvas');\n    var form = KTUtil.find(search, '.kt-quick-search__form');\n    var wrapper = KTUtil.find(search, '.kt-quick-search__wrapper');\n    var offcanvas = new KTOffcanvas(searchPanel, {\n      overlay: true,\n      baseClass: 'kt-offcanvas-panel',\n      closeBy: 'kt_offcanvas_toolbar_search_close',\n      toggleBy: 'kt_offcanvas_toolbar_search_toggler_btn'\n    });\n    KTUtil.scrollInit(wrapper, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n        height = height - parseInt(KTUtil.actualHeight(form));\n        height = height - parseInt(KTUtil.css(form, 'marginBottom'));\n\n        if (head) {\n          height = height - parseInt(KTUtil.actualHeight(head));\n          height = height - parseInt(KTUtil.css(head, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(searchPanel, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(searchPanel, 'paddingBottom'));\n        return height;\n      }\n    });\n  };\n\n  return {\n    init: function init() {\n      notificationPanel = KTUtil.get('kt_offcanvas_toolbar_notifications');\n      quickActionsPanel = KTUtil.get('kt_offcanvas_toolbar_quick_actions');\n      profilePanel = KTUtil.get('kt_offcanvas_toolbar_profile');\n      searchPanel = KTUtil.get('kt_offcanvas_toolbar_search');\n      initNotifications();\n      initQucikActions();\n      initProfile();\n      initSearch();\n    }\n  };\n}(); // Init on page load completed\n\n\nKTUtil.ready(function () {\n  KTOffcanvasPanel.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvdGhlbWUvY29yZS9sYXlvdXQvb2ZmY2FudmFzLXBhbmVsLmpzP2I3MzYiXSwibmFtZXMiOlsiS1RPZmZjYW52YXNQYW5lbCIsImluaXROb3RpZmljYXRpb25zIiwiaGVhZCIsIktUVXRpbCIsImJvZHkiLCJvZmZjYW52YXMiLCJvdmVybGF5IiwiYmFzZUNsYXNzIiwiY2xvc2VCeSIsInRvZ2dsZUJ5IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJpbml0UXVjaWtBY3Rpb25zIiwiaW5pdFByb2ZpbGUiLCJpbml0U2VhcmNoIiwic2VhcmNoIiwiZm9ybSIsIndyYXBwZXIiLCJpbml0Iiwibm90aWZpY2F0aW9uUGFuZWwiLCJxdWlja0FjdGlvbnNQYW5lbCIsInByb2ZpbGVQYW5lbCIsInNlYXJjaFBhbmVsIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxnQkFBZ0IsR0FBRyxZQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQUlDLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsR0FBVztBQUMvQixRQUFJQyxJQUFJLEdBQUdDLE1BQU0sQ0FBTkEsd0JBQVgsMkJBQVdBLENBQVg7QUFDQSxRQUFJQyxJQUFJLEdBQUdELE1BQU0sQ0FBTkEsd0JBQVgsMkJBQVdBLENBQVg7QUFFQSxRQUFJRSxTQUFTLEdBQUcsbUNBQW1DO0FBQy9DQyxhQUFPLEVBRHdDO0FBRS9DQyxlQUFTLEVBRnNDO0FBRy9DQyxhQUFPLEVBSHdDO0FBSS9DQyxjQUFRLEVBQUU7QUFKcUMsS0FBbkMsQ0FBaEI7QUFPQU4sVUFBTSxDQUFOQSxpQkFBd0I7QUFDcEJPLHNCQUFnQixFQURJO0FBRXBCQywwQkFBb0IsRUFGQTtBQUdwQkMsd0JBQWtCLEVBSEU7QUFJcEJDLFlBQU0sRUFBRSxrQkFBVztBQUNmLFlBQUlBLE1BQU0sR0FBR0MsUUFBUSxDQUFDWCxNQUFNLENBQU5BLGNBQXRCLE1BQXFCLENBQXJCOztBQUVBLGtCQUFVO0FBQ05VLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDWCxNQUFNLENBQU5BLGFBQTNCVSxJQUEyQlYsQ0FBRCxDQUExQlU7QUFDQUEsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNYLE1BQU0sQ0FBTkEsVUFBM0JVLGNBQTJCVixDQUFELENBQTFCVTtBQUNIOztBQUVEQSxjQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDWCxNQUFNLENBQU5BLHVCQUEzQlUsWUFBMkJWLENBQUQsQ0FBMUJVO0FBQ0FBLGNBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNYLE1BQU0sQ0FBTkEsdUJBQTNCVSxlQUEyQlYsQ0FBRCxDQUExQlU7QUFFQTtBQUNIO0FBaEJtQixLQUF4QlY7QUFYSjs7QUErQkEsTUFBSVksZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixHQUFXO0FBQzlCLFFBQUliLElBQUksR0FBR0MsTUFBTSxDQUFOQSx3QkFBWCwyQkFBV0EsQ0FBWDtBQUNBLFFBQUlDLElBQUksR0FBR0QsTUFBTSxDQUFOQSx3QkFBWCwyQkFBV0EsQ0FBWDtBQUVBLFFBQUlFLFNBQVMsR0FBRyxtQ0FBbUM7QUFDL0NDLGFBQU8sRUFEd0M7QUFFL0NDLGVBQVMsRUFGc0M7QUFHL0NDLGFBQU8sRUFId0M7QUFJL0NDLGNBQVEsRUFBRTtBQUpxQyxLQUFuQyxDQUFoQjtBQU9BTixVQUFNLENBQU5BLGlCQUF3QjtBQUNwQk8sc0JBQWdCLEVBREk7QUFFcEJDLDBCQUFvQixFQUZBO0FBR3BCQyx3QkFBa0IsRUFIRTtBQUlwQkMsWUFBTSxFQUFFLGtCQUFXO0FBQ2YsWUFBSUEsTUFBTSxHQUFHQyxRQUFRLENBQUNYLE1BQU0sQ0FBTkEsY0FBdEIsTUFBcUIsQ0FBckI7O0FBRUEsa0JBQVU7QUFDTlUsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNYLE1BQU0sQ0FBTkEsYUFBM0JVLElBQTJCVixDQUFELENBQTFCVTtBQUNBQSxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1gsTUFBTSxDQUFOQSxVQUEzQlUsY0FBMkJWLENBQUQsQ0FBMUJVO0FBQ0g7O0FBRURBLGNBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNYLE1BQU0sQ0FBTkEsdUJBQTNCVSxZQUEyQlYsQ0FBRCxDQUExQlU7QUFDQUEsY0FBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1gsTUFBTSxDQUFOQSx1QkFBM0JVLGVBQTJCVixDQUFELENBQTFCVTtBQUVBO0FBQ0g7QUFoQm1CLEtBQXhCVjtBQVhKOztBQStCQSxNQUFJYSxXQUFXLEdBQUcsU0FBZEEsV0FBYyxHQUFXO0FBQ3pCLFFBQUlkLElBQUksR0FBR0MsTUFBTSxDQUFOQSxtQkFBWCwyQkFBV0EsQ0FBWDtBQUNBLFFBQUlDLElBQUksR0FBR0QsTUFBTSxDQUFOQSxtQkFBWCwyQkFBV0EsQ0FBWDtBQUVBLFFBQUlFLFNBQVMsR0FBRyw4QkFBOEI7QUFDMUNDLGFBQU8sRUFEbUM7QUFFMUNDLGVBQVMsRUFGaUM7QUFHMUNDLGFBQU8sRUFIbUM7QUFJMUNDLGNBQVEsRUFBRTtBQUpnQyxLQUE5QixDQUFoQjtBQU9BTixVQUFNLENBQU5BLGlCQUF3QjtBQUNwQk8sc0JBQWdCLEVBREk7QUFFcEJDLDBCQUFvQixFQUZBO0FBR3BCQyx3QkFBa0IsRUFIRTtBQUlwQkMsWUFBTSxFQUFFLGtCQUFXO0FBQ2YsWUFBSUEsTUFBTSxHQUFHQyxRQUFRLENBQUNYLE1BQU0sQ0FBTkEsY0FBdEIsTUFBcUIsQ0FBckI7O0FBRUEsa0JBQVU7QUFDTlUsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNYLE1BQU0sQ0FBTkEsYUFBM0JVLElBQTJCVixDQUFELENBQTFCVTtBQUNBQSxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1gsTUFBTSxDQUFOQSxVQUEzQlUsY0FBMkJWLENBQUQsQ0FBMUJVO0FBQ0g7O0FBRURBLGNBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNYLE1BQU0sQ0FBTkEsa0JBQTNCVSxZQUEyQlYsQ0FBRCxDQUExQlU7QUFDQUEsY0FBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1gsTUFBTSxDQUFOQSxrQkFBM0JVLGVBQTJCVixDQUFELENBQTFCVTtBQUVBO0FBQ0g7QUFoQm1CLEtBQXhCVjtBQVhKOztBQStCQSxNQUFJYyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxHQUFXO0FBQ3hCLFFBQUlmLElBQUksR0FBR0MsTUFBTSxDQUFOQSxrQkFBWCwyQkFBV0EsQ0FBWDtBQUNBLFFBQUlDLElBQUksR0FBR0QsTUFBTSxDQUFOQSxrQkFBWCwyQkFBV0EsQ0FBWDtBQUNBLFFBQUllLE1BQU0sR0FBR2YsTUFBTSxDQUFOQSxJQUFiLDJCQUFhQSxDQUFiO0FBQ0EsUUFBSWdCLElBQUksR0FBR2hCLE1BQU0sQ0FBTkEsYUFBWCx3QkFBV0EsQ0FBWDtBQUNBLFFBQUlpQixPQUFPLEdBQUdqQixNQUFNLENBQU5BLGFBQWQsMkJBQWNBLENBQWQ7QUFFQSxRQUFJRSxTQUFTLEdBQUcsNkJBQTZCO0FBQ3pDQyxhQUFPLEVBRGtDO0FBRXpDQyxlQUFTLEVBRmdDO0FBR3pDQyxhQUFPLEVBSGtDO0FBSXpDQyxjQUFRLEVBQUU7QUFKK0IsS0FBN0IsQ0FBaEI7QUFPQU4sVUFBTSxDQUFOQSxvQkFBMkI7QUFDdkJPLHNCQUFnQixFQURPO0FBRXZCQywwQkFBb0IsRUFGRztBQUd2QkMsd0JBQWtCLEVBSEs7QUFJdkJDLFlBQU0sRUFBRSxrQkFBVztBQUNmLFlBQUlBLE1BQU0sR0FBR0MsUUFBUSxDQUFDWCxNQUFNLENBQU5BLGNBQXRCLE1BQXFCLENBQXJCO0FBRUFVLGNBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNYLE1BQU0sQ0FBTkEsYUFBM0JVLElBQTJCVixDQUFELENBQTFCVTtBQUNBQSxjQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDWCxNQUFNLENBQU5BLFVBQTNCVSxjQUEyQlYsQ0FBRCxDQUExQlU7O0FBRUEsa0JBQVU7QUFDTkEsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNYLE1BQU0sQ0FBTkEsYUFBM0JVLElBQTJCVixDQUFELENBQTFCVTtBQUNBQSxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1gsTUFBTSxDQUFOQSxVQUEzQlUsY0FBMkJWLENBQUQsQ0FBMUJVO0FBQ0g7O0FBRURBLGNBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNYLE1BQU0sQ0FBTkEsaUJBQTNCVSxZQUEyQlYsQ0FBRCxDQUExQlU7QUFDQUEsY0FBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1gsTUFBTSxDQUFOQSxpQkFBM0JVLGVBQTJCVixDQUFELENBQTFCVTtBQUVBO0FBQ0g7QUFuQnNCLEtBQTNCVjtBQWRKOztBQXFDQSxTQUFPO0FBQ0hrQixRQUFJLEVBQUUsZ0JBQVc7QUFDYkMsdUJBQWlCLEdBQUduQixNQUFNLENBQU5BLElBQXBCbUIsb0NBQW9CbkIsQ0FBcEJtQjtBQUNBQyx1QkFBaUIsR0FBR3BCLE1BQU0sQ0FBTkEsSUFBcEJvQixvQ0FBb0JwQixDQUFwQm9CO0FBQ0FDLGtCQUFZLEdBQUdyQixNQUFNLENBQU5BLElBQWZxQiw4QkFBZXJCLENBQWZxQjtBQUNBQyxpQkFBVyxHQUFHdEIsTUFBTSxDQUFOQSxJQUFkc0IsNkJBQWN0QixDQUFkc0I7QUFFQXhCLHVCQUFpQjtBQUNqQmMsc0JBQWdCO0FBQ2hCQyxpQkFBVztBQUNYQyxnQkFBVTtBQUNiO0FBWEUsR0FBUDtBQXhJSixDQUF1QixFQUF2QixDLENBdUpBOzs7QUFDQWQsTUFBTSxDQUFOQSxNQUFhLFlBQVc7QUFDcEJILGtCQUFnQixDQUFoQkE7QUFESkciLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvdGhlbWUvY29yZS9sYXlvdXQvb2ZmY2FudmFzLXBhbmVsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBLVE9mZmNhbnZhc1BhbmVsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vdGlmaWNhdGlvblBhbmVsO1xuICAgIHZhciBxdWlja0FjdGlvbnNQYW5lbDtcbiAgICB2YXIgcHJvZmlsZVBhbmVsO1xuICAgIHZhciBzZWFyY2hQYW5lbDtcblxuICAgIHZhciBpbml0Tm90aWZpY2F0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaGVhZCA9IEtUVXRpbC5maW5kKG5vdGlmaWNhdGlvblBhbmVsLCAnLmt0LW9mZmNhbnZhcy1wYW5lbF9faGVhZCcpO1xuICAgICAgICB2YXIgYm9keSA9IEtUVXRpbC5maW5kKG5vdGlmaWNhdGlvblBhbmVsLCAnLmt0LW9mZmNhbnZhcy1wYW5lbF9fYm9keScpO1xuXG4gICAgICAgIHZhciBvZmZjYW52YXMgPSBuZXcgS1RPZmZjYW52YXMobm90aWZpY2F0aW9uUGFuZWwsIHtcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXG4gICAgICAgICAgICBiYXNlQ2xhc3M6ICdrdC1vZmZjYW52YXMtcGFuZWwnLFxuICAgICAgICAgICAgY2xvc2VCeTogJ2t0X29mZmNhbnZhc190b29sYmFyX25vdGlmaWNhdGlvbnNfY2xvc2UnLFxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdrdF9vZmZjYW52YXNfdG9vbGJhcl9ub3RpZmljYXRpb25zX3RvZ2dsZXJfYnRuJ1xuICAgICAgICB9KTtcblxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdChib2R5LCB7XG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxuICAgICAgICAgICAgcmVzZXRIZWlnaHRPbkRlc3Ryb3k6IHRydWUsXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuZ2V0Vmlld1BvcnQoKS5oZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGhlYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkKSk7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoaGVhZCwgJ21hcmdpbkJvdHRvbScpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKG5vdGlmaWNhdGlvblBhbmVsLCAncGFkZGluZ1RvcCcpKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKG5vdGlmaWNhdGlvblBhbmVsLCAncGFkZGluZ0JvdHRvbScpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBpbml0UXVjaWtBY3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoZWFkID0gS1RVdGlsLmZpbmQocXVpY2tBY3Rpb25zUGFuZWwsICcua3Qtb2ZmY2FudmFzLXBhbmVsX19oZWFkJyk7XG4gICAgICAgIHZhciBib2R5ID0gS1RVdGlsLmZpbmQocXVpY2tBY3Rpb25zUGFuZWwsICcua3Qtb2ZmY2FudmFzLXBhbmVsX19ib2R5Jyk7XG5cbiAgICAgICAgdmFyIG9mZmNhbnZhcyA9IG5ldyBLVE9mZmNhbnZhcyhxdWlja0FjdGlvbnNQYW5lbCwge1xuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ2t0LW9mZmNhbnZhcy1wYW5lbCcsXG4gICAgICAgICAgICBjbG9zZUJ5OiAna3Rfb2ZmY2FudmFzX3Rvb2xiYXJfcXVpY2tfYWN0aW9uc19jbG9zZScsXG4gICAgICAgICAgICB0b2dnbGVCeTogJ2t0X29mZmNhbnZhc190b29sYmFyX3F1aWNrX2FjdGlvbnNfdG9nZ2xlcl9idG4nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIEtUVXRpbC5zY3JvbGxJbml0KGJvZHksIHtcbiAgICAgICAgICAgIGRpc2FibGVGb3JNb2JpbGU6IHRydWUsXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcbiAgICAgICAgICAgIGhhbmRsZVdpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaGVhZCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuYWN0dWFsSGVpZ2h0KGhlYWQpKTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkLCAnbWFyZ2luQm90dG9tJykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MocXVpY2tBY3Rpb25zUGFuZWwsICdwYWRkaW5nVG9wJykpO1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MocXVpY2tBY3Rpb25zUGFuZWwsICdwYWRkaW5nQm90dG9tJykpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRQcm9maWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoZWFkID0gS1RVdGlsLmZpbmQocHJvZmlsZVBhbmVsLCAnLmt0LW9mZmNhbnZhcy1wYW5lbF9faGVhZCcpO1xuICAgICAgICB2YXIgYm9keSA9IEtUVXRpbC5maW5kKHByb2ZpbGVQYW5lbCwgJy5rdC1vZmZjYW52YXMtcGFuZWxfX2JvZHknKTtcblxuICAgICAgICB2YXIgb2ZmY2FudmFzID0gbmV3IEtUT2ZmY2FudmFzKHByb2ZpbGVQYW5lbCwge1xuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ2t0LW9mZmNhbnZhcy1wYW5lbCcsXG4gICAgICAgICAgICBjbG9zZUJ5OiAna3Rfb2ZmY2FudmFzX3Rvb2xiYXJfcHJvZmlsZV9jbG9zZScsXG4gICAgICAgICAgICB0b2dnbGVCeTogJ2t0X29mZmNhbnZhc190b29sYmFyX3Byb2ZpbGVfdG9nZ2xlcl9idG4nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIEtUVXRpbC5zY3JvbGxJbml0KGJvZHksIHtcbiAgICAgICAgICAgIGRpc2FibGVGb3JNb2JpbGU6IHRydWUsXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcbiAgICAgICAgICAgIGhhbmRsZVdpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaGVhZCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuYWN0dWFsSGVpZ2h0KGhlYWQpKTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkLCAnbWFyZ2luQm90dG9tJykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MocHJvZmlsZVBhbmVsLCAncGFkZGluZ1RvcCcpKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKHByb2ZpbGVQYW5lbCwgJ3BhZGRpbmdCb3R0b20nKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgaW5pdFNlYXJjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaGVhZCA9IEtUVXRpbC5maW5kKHNlYXJjaFBhbmVsLCAnLmt0LW9mZmNhbnZhcy1wYW5lbF9faGVhZCcpO1xuICAgICAgICB2YXIgYm9keSA9IEtUVXRpbC5maW5kKHNlYXJjaFBhbmVsLCAnLmt0LW9mZmNhbnZhcy1wYW5lbF9fYm9keScpO1xuICAgICAgICB2YXIgc2VhcmNoID0gS1RVdGlsLmdldCgna3RfcXVpY2tfc2VhcmNoX29mZmNhbnZhcycpO1xuICAgICAgICB2YXIgZm9ybSA9IEtUVXRpbC5maW5kKHNlYXJjaCwgJy5rdC1xdWljay1zZWFyY2hfX2Zvcm0nKTtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBLVFV0aWwuZmluZChzZWFyY2gsICcua3QtcXVpY2stc2VhcmNoX193cmFwcGVyJyk7XG5cbiAgICAgICAgdmFyIG9mZmNhbnZhcyA9IG5ldyBLVE9mZmNhbnZhcyhzZWFyY2hQYW5lbCwge1xuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ2t0LW9mZmNhbnZhcy1wYW5lbCcsXG4gICAgICAgICAgICBjbG9zZUJ5OiAna3Rfb2ZmY2FudmFzX3Rvb2xiYXJfc2VhcmNoX2Nsb3NlJyxcbiAgICAgICAgICAgIHRvZ2dsZUJ5OiAna3Rfb2ZmY2FudmFzX3Rvb2xiYXJfc2VhcmNoX3RvZ2dsZXJfYnRuJ1xuICAgICAgICB9KTtcblxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdCh3cmFwcGVyLCB7XG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxuICAgICAgICAgICAgcmVzZXRIZWlnaHRPbkRlc3Ryb3k6IHRydWUsXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuZ2V0Vmlld1BvcnQoKS5oZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChmb3JtKSk7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhmb3JtLCAnbWFyZ2luQm90dG9tJykpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGhlYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkKSk7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoaGVhZCwgJ21hcmdpbkJvdHRvbScpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKHNlYXJjaFBhbmVsLCAncGFkZGluZ1RvcCcpKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKHNlYXJjaFBhbmVsLCAncGFkZGluZ0JvdHRvbScpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbm90aWZpY2F0aW9uUGFuZWwgPSBLVFV0aWwuZ2V0KCdrdF9vZmZjYW52YXNfdG9vbGJhcl9ub3RpZmljYXRpb25zJyk7XG4gICAgICAgICAgICBxdWlja0FjdGlvbnNQYW5lbCA9IEtUVXRpbC5nZXQoJ2t0X29mZmNhbnZhc190b29sYmFyX3F1aWNrX2FjdGlvbnMnKTtcbiAgICAgICAgICAgIHByb2ZpbGVQYW5lbCA9IEtUVXRpbC5nZXQoJ2t0X29mZmNhbnZhc190b29sYmFyX3Byb2ZpbGUnKTtcbiAgICAgICAgICAgIHNlYXJjaFBhbmVsID0gS1RVdGlsLmdldCgna3Rfb2ZmY2FudmFzX3Rvb2xiYXJfc2VhcmNoJyk7XG5cbiAgICAgICAgICAgIGluaXROb3RpZmljYXRpb25zKCk7XG4gICAgICAgICAgICBpbml0UXVjaWtBY3Rpb25zKCk7XG4gICAgICAgICAgICBpbml0UHJvZmlsZSgpO1xuICAgICAgICAgICAgaW5pdFNlYXJjaCgpO1xuICAgICAgICB9XG4gICAgfTtcbn0oKTtcblxuLy8gSW5pdCBvbiBwYWdlIGxvYWQgY29tcGxldGVkXG5LVFV0aWwucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgS1RPZmZjYW52YXNQYW5lbC5pbml0KCk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/theme/core/layout/offcanvas-panel.js\n");

/***/ }),

/***/ "./resources/js/theme/core/layout/quick-panel.js":
/*!*******************************************************!*\
  !*** ./resources/js/theme/core/layout/quick-panel.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTQuickPanel = function () {\n  var panel;\n  var notificationPanel;\n  var logsPanel;\n  var settingsPanel;\n\n  var getContentHeight = function getContentHeight() {\n    var height;\n    var nav = KTUtil.find(panel, '.kt-quick-panel__nav');\n    var content = KTUtil.find(panel, '.kt-quick-panel__content');\n    height = parseInt(KTUtil.getViewPort().height) - parseInt(KTUtil.actualHeight(nav)) - 2 * parseInt(KTUtil.css(nav, 'padding-top')) - 10;\n    return height;\n  };\n\n  var initOffcanvas = function initOffcanvas() {\n    new KTOffcanvas(panel, {\n      overlay: true,\n      baseClass: 'kt-quick-panel',\n      closeBy: 'kt_quick_panel_close_btn',\n      toggleBy: 'kt_quick_panel_toggler_btn'\n    });\n  };\n\n  var initNotifications = function initNotifications() {\n    KTUtil.scrollInit(notificationPanel, {\n      mobileNativeScroll: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        return getContentHeight();\n      }\n    });\n  };\n\n  var initLogs = function initLogs() {\n    KTUtil.scrollInit(logsPanel, {\n      mobileNativeScroll: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        return getContentHeight();\n      }\n    });\n  };\n\n  var initSettings = function initSettings() {\n    KTUtil.scrollInit(settingsPanel, {\n      mobileNativeScroll: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        return getContentHeight();\n      }\n    });\n  };\n\n  var updatePerfectScrollbars = function updatePerfectScrollbars() {\n    $(panel).find('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n      KTUtil.scrollUpdate(notificationPanel);\n      KTUtil.scrollUpdate(logsPanel);\n      KTUtil.scrollUpdate(settingsPanel);\n    });\n  };\n\n  return {\n    init: function init() {\n      panel = KTUtil.get('kt_quick_panel');\n      notificationPanel = KTUtil.get('kt_quick_panel_tab_notifications');\n      logsPanel = KTUtil.get('kt_quick_panel_tab_logs');\n      settingsPanel = KTUtil.get('kt_quick_panel_tab_settings');\n      initOffcanvas();\n      initNotifications();\n      initLogs();\n      initSettings();\n      updatePerfectScrollbars();\n    }\n  };\n}();\n\n$(document).ready(function () {\n  KTQuickPanel.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvdGhlbWUvY29yZS9sYXlvdXQvcXVpY2stcGFuZWwuanM/NmNiYSJdLCJuYW1lcyI6WyJLVFF1aWNrUGFuZWwiLCJnZXRDb250ZW50SGVpZ2h0IiwibmF2IiwiS1RVdGlsIiwiY29udGVudCIsImhlaWdodCIsInBhcnNlSW50IiwiaW5pdE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJpbml0Tm90aWZpY2F0aW9ucyIsIm1vYmlsZU5hdGl2ZVNjcm9sbCIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaW5pdExvZ3MiLCJpbml0U2V0dGluZ3MiLCJ1cGRhdGVQZXJmZWN0U2Nyb2xsYmFycyIsIiQiLCJpbml0IiwicGFuZWwiLCJub3RpZmljYXRpb25QYW5lbCIsImxvZ3NQYW5lbCIsInNldHRpbmdzUGFuZWwiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLFlBQVksR0FBRyxZQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQUlDLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsR0FBVztBQUM5QjtBQUNBLFFBQUlDLEdBQUcsR0FBR0MsTUFBTSxDQUFOQSxZQUFWLHNCQUFVQSxDQUFWO0FBQ0EsUUFBSUMsT0FBTyxHQUFHRCxNQUFNLENBQU5BLFlBQWQsMEJBQWNBLENBQWQ7QUFFQUUsVUFBTSxHQUFHQyxRQUFRLENBQUNILE1BQU0sQ0FBTkEsY0FBVEcsTUFBUSxDQUFSQSxHQUF3Q0EsUUFBUSxDQUFDSCxNQUFNLENBQU5BLGFBQWpERyxHQUFpREgsQ0FBRCxDQUFoREcsR0FBOEUsSUFBSUEsUUFBUSxDQUFDSCxNQUFNLENBQU5BLFNBQTNGRyxhQUEyRkgsQ0FBRCxDQUExRkcsR0FBVEQ7QUFFQTtBQVBKOztBQVVBLE1BQUlFLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsR0FBVztBQUMzQiwyQkFBdUI7QUFDbkJDLGFBQU8sRUFEWTtBQUVuQkMsZUFBUyxFQUZVO0FBR25CQyxhQUFPLEVBSFk7QUFJbkJDLGNBQVEsRUFBRTtBQUpTLEtBQXZCO0FBREo7O0FBU0EsTUFBSUMsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixHQUFXO0FBQy9CVCxVQUFNLENBQU5BLDhCQUFxQztBQUNqQ1Usd0JBQWtCLEVBRGU7QUFFakNDLDBCQUFvQixFQUZhO0FBR2pDQyx3QkFBa0IsRUFIZTtBQUlqQ1YsWUFBTSxFQUFFLGtCQUFXO0FBQ2YsZUFBT0osZ0JBQVA7QUFDSDtBQU5nQyxLQUFyQ0U7QUFESjs7QUFXQSxNQUFJYSxRQUFRLEdBQUcsU0FBWEEsUUFBVyxHQUFXO0FBQ3RCYixVQUFNLENBQU5BLHNCQUE2QjtBQUN6QlUsd0JBQWtCLEVBRE87QUFFekJDLDBCQUFvQixFQUZLO0FBR3pCQyx3QkFBa0IsRUFITztBQUl6QlYsWUFBTSxFQUFFLGtCQUFXO0FBQ2YsZUFBT0osZ0JBQVA7QUFDSDtBQU53QixLQUE3QkU7QUFESjs7QUFXQSxNQUFJYyxZQUFZLEdBQUcsU0FBZkEsWUFBZSxHQUFXO0FBQzFCZCxVQUFNLENBQU5BLDBCQUFpQztBQUM3QlUsd0JBQWtCLEVBRFc7QUFFN0JDLDBCQUFvQixFQUZTO0FBRzdCQyx3QkFBa0IsRUFIVztBQUk3QlYsWUFBTSxFQUFFLGtCQUFXO0FBQ2YsZUFBT0osZ0JBQVA7QUFDSDtBQU40QixLQUFqQ0U7QUFESjs7QUFXQSxNQUFJZSx1QkFBdUIsR0FBRyxTQUExQkEsdUJBQTBCLEdBQVc7QUFDckNDLEtBQUMsQ0FBREEsS0FBQyxDQUFEQSxpREFBeUQsYUFBYTtBQUNsRWhCLFlBQU0sQ0FBTkE7QUFDQUEsWUFBTSxDQUFOQTtBQUNBQSxZQUFNLENBQU5BO0FBSEpnQjtBQURKOztBQVFBLFNBQU87QUFDSEMsUUFBSSxFQUFFLGdCQUFXO0FBQ2JDLFdBQUssR0FBR2xCLE1BQU0sQ0FBTkEsSUFBUmtCLGdCQUFRbEIsQ0FBUmtCO0FBQ0FDLHVCQUFpQixHQUFHbkIsTUFBTSxDQUFOQSxJQUFwQm1CLGtDQUFvQm5CLENBQXBCbUI7QUFDQUMsZUFBUyxHQUFHcEIsTUFBTSxDQUFOQSxJQUFab0IseUJBQVlwQixDQUFab0I7QUFDQUMsbUJBQWEsR0FBR3JCLE1BQU0sQ0FBTkEsSUFBaEJxQiw2QkFBZ0JyQixDQUFoQnFCO0FBRUFqQixtQkFBYTtBQUNiSyx1QkFBaUI7QUFDakJJLGNBQVE7QUFDUkMsa0JBQVk7QUFDWkMsNkJBQXVCO0FBQzFCO0FBWkUsR0FBUDtBQWxFSixDQUFtQixFQUFuQjs7QUFrRkFDLENBQUMsQ0FBREEsUUFBQyxDQUFEQSxPQUFrQixZQUFXO0FBQ3pCbkIsY0FBWSxDQUFaQTtBQURKbUIiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvdGhlbWUvY29yZS9sYXlvdXQvcXVpY2stcGFuZWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIEtUUXVpY2tQYW5lbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYW5lbDtcbiAgICB2YXIgbm90aWZpY2F0aW9uUGFuZWw7XG4gICAgdmFyIGxvZ3NQYW5lbDtcbiAgICB2YXIgc2V0dGluZ3NQYW5lbDtcblxuICAgIHZhciBnZXRDb250ZW50SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoZWlnaHQ7XG4gICAgICAgIHZhciBuYXYgPSBLVFV0aWwuZmluZChwYW5lbCwgJy5rdC1xdWljay1wYW5lbF9fbmF2Jyk7XG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQocGFuZWwsICcua3QtcXVpY2stcGFuZWxfX2NvbnRlbnQnKTtcblxuICAgICAgICBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuZ2V0Vmlld1BvcnQoKS5oZWlnaHQpIC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChuYXYpKSAtICgyICogcGFyc2VJbnQoS1RVdGlsLmNzcyhuYXYsICdwYWRkaW5nLXRvcCcpKSkgLSAxMDtcblxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgIH1cblxuICAgIHZhciBpbml0T2ZmY2FudmFzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG5ldyBLVE9mZmNhbnZhcyhwYW5lbCwge1xuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ2t0LXF1aWNrLXBhbmVsJyxcbiAgICAgICAgICAgIGNsb3NlQnk6ICdrdF9xdWlja19wYW5lbF9jbG9zZV9idG4nLFxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdrdF9xdWlja19wYW5lbF90b2dnbGVyX2J0bidcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGluaXROb3RpZmljYXRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIEtUVXRpbC5zY3JvbGxJbml0KG5vdGlmaWNhdGlvblBhbmVsLCB7XG4gICAgICAgICAgICBtb2JpbGVOYXRpdmVTY3JvbGw6IHRydWUsXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcbiAgICAgICAgICAgIGhhbmRsZVdpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldENvbnRlbnRIZWlnaHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRMb2dzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIEtUVXRpbC5zY3JvbGxJbml0KGxvZ3NQYW5lbCwge1xuICAgICAgICAgICAgbW9iaWxlTmF0aXZlU2Nyb2xsOiB0cnVlLFxuICAgICAgICAgICAgcmVzZXRIZWlnaHRPbkRlc3Ryb3k6IHRydWUsXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRDb250ZW50SGVpZ2h0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBpbml0U2V0dGluZ3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQoc2V0dGluZ3NQYW5lbCwge1xuICAgICAgICAgICAgbW9iaWxlTmF0aXZlU2Nyb2xsOiB0cnVlLFxuICAgICAgICAgICAgcmVzZXRIZWlnaHRPbkRlc3Ryb3k6IHRydWUsXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRDb250ZW50SGVpZ2h0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciB1cGRhdGVQZXJmZWN0U2Nyb2xsYmFycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkKHBhbmVsKS5maW5kKCdhW2RhdGEtdG9nZ2xlPVwidGFiXCJdJykub24oJ3Nob3duLmJzLnRhYicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBLVFV0aWwuc2Nyb2xsVXBkYXRlKG5vdGlmaWNhdGlvblBhbmVsKTtcbiAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxVcGRhdGUobG9nc1BhbmVsKTtcbiAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxVcGRhdGUoc2V0dGluZ3NQYW5lbCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcGFuZWwgPSBLVFV0aWwuZ2V0KCdrdF9xdWlja19wYW5lbCcpO1xuICAgICAgICAgICAgbm90aWZpY2F0aW9uUGFuZWwgPSBLVFV0aWwuZ2V0KCdrdF9xdWlja19wYW5lbF90YWJfbm90aWZpY2F0aW9ucycpO1xuICAgICAgICAgICAgbG9nc1BhbmVsID0gS1RVdGlsLmdldCgna3RfcXVpY2tfcGFuZWxfdGFiX2xvZ3MnKTtcbiAgICAgICAgICAgIHNldHRpbmdzUGFuZWwgPSBLVFV0aWwuZ2V0KCdrdF9xdWlja19wYW5lbF90YWJfc2V0dGluZ3MnKTtcblxuICAgICAgICAgICAgaW5pdE9mZmNhbnZhcygpO1xuICAgICAgICAgICAgaW5pdE5vdGlmaWNhdGlvbnMoKTtcbiAgICAgICAgICAgIGluaXRMb2dzKCk7XG4gICAgICAgICAgICBpbml0U2V0dGluZ3MoKTtcbiAgICAgICAgICAgIHVwZGF0ZVBlcmZlY3RTY3JvbGxiYXJzKCk7XG4gICAgICAgIH1cbiAgICB9O1xufSgpO1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBLVFF1aWNrUGFuZWwuaW5pdCgpO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/theme/core/layout/quick-panel.js\n");

/***/ }),

/***/ "./resources/js/theme/core/layout/quick-search.js":
/*!********************************************************!*\
  !*** ./resources/js/theme/core/layout/quick-search.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTQuickSearch = function KTQuickSearch() {\n  var target;\n  var form;\n  var input;\n  var closeIcon;\n  var resultWrapper;\n  var resultDropdown;\n  var resultDropdownToggle;\n  var inputGroup;\n  var query = '';\n  var hasResult = false;\n  var timeout = false;\n  var isProcessing = false;\n  var requestTimeout = 200; // ajax request fire timeout in milliseconds\n\n  var spinnerClass = 'kt-spinner kt-spinner--input kt-spinner--sm kt-spinner--brand kt-spinner--right';\n  var resultClass = 'kt-quick-search--has-result';\n  var minLength = 2;\n\n  var showProgress = function showProgress() {\n    isProcessing = true;\n    KTUtil.addClass(inputGroup, spinnerClass);\n\n    if (closeIcon) {\n      KTUtil.hide(closeIcon);\n    }\n  };\n\n  var hideProgress = function hideProgress() {\n    isProcessing = false;\n    KTUtil.removeClass(inputGroup, spinnerClass);\n\n    if (closeIcon) {\n      if (input.value.length < minLength) {\n        KTUtil.hide(closeIcon);\n      } else {\n        KTUtil.show(closeIcon, 'flex');\n      }\n    }\n  };\n\n  var showDropdown = function showDropdown() {\n    if (resultDropdownToggle && !KTUtil.hasClass(resultDropdown, 'show')) {\n      $(resultDropdownToggle).dropdown('toggle');\n      $(resultDropdownToggle).dropdown('update');\n    }\n  };\n\n  var hideDropdown = function hideDropdown() {\n    if (resultDropdownToggle && KTUtil.hasClass(resultDropdown, 'show')) {\n      $(resultDropdownToggle).dropdown('toggle');\n    }\n  };\n\n  var processSearch = function processSearch() {\n    if (hasResult && query === input.value) {\n      hideProgress();\n      KTUtil.addClass(target, resultClass);\n      showDropdown();\n      KTUtil.scrollUpdate(resultWrapper);\n      return;\n    }\n\n    query = input.value;\n    KTUtil.removeClass(target, resultClass);\n    showProgress();\n    hideDropdown();\n    setTimeout(function () {\n      $.ajax({\n        url: 'https://keenthemes.com/metronic/themes/themes/metronic/dist/preview/inc/api/quick_search.php',\n        data: {\n          query: query\n        },\n        dataType: 'html',\n        success: function success(res) {\n          hasResult = true;\n          hideProgress();\n          KTUtil.addClass(target, resultClass);\n          KTUtil.setHTML(resultWrapper, res);\n          showDropdown();\n          KTUtil.scrollUpdate(resultWrapper);\n        },\n        error: function error(res) {\n          hasResult = false;\n          hideProgress();\n          KTUtil.addClass(target, resultClass);\n          KTUtil.setHTML(resultWrapper, '<span class=\"kt-quick-search__message\">Connection error. Pleae try again later.</div>');\n          showDropdown();\n          KTUtil.scrollUpdate(resultWrapper);\n        }\n      });\n    }, 1000);\n  };\n\n  var handleCancel = function handleCancel(e) {\n    input.value = '';\n    query = '';\n    hasResult = false;\n    KTUtil.hide(closeIcon);\n    KTUtil.removeClass(target, resultClass);\n    hideDropdown();\n  };\n\n  var handleSearch = function handleSearch() {\n    if (input.value.length < minLength) {\n      hideProgress();\n      hideDropdown();\n      return;\n    }\n\n    if (isProcessing == true) {\n      return;\n    }\n\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    timeout = setTimeout(function () {\n      processSearch();\n    }, requestTimeout);\n  };\n\n  return {\n    init: function init(element) {\n      // Init\n      target = element;\n      form = KTUtil.find(target, '.kt-quick-search__form');\n      input = KTUtil.find(target, '.kt-quick-search__input');\n      closeIcon = KTUtil.find(target, '.kt-quick-search__close');\n      resultWrapper = KTUtil.find(target, '.kt-quick-search__wrapper');\n      resultDropdown = KTUtil.find(target, '.dropdown-menu');\n      resultDropdownToggle = KTUtil.find(target, '[data-toggle=\"dropdown\"]');\n      inputGroup = KTUtil.find(target, '.input-group'); // Attach input keyup handler\n\n      KTUtil.addEvent(input, 'keyup', handleSearch);\n      KTUtil.addEvent(input, 'focus', handleSearch); // Prevent enter click\n\n      form.onkeypress = function (e) {\n        var key = e.charCode || e.keyCode || 0;\n\n        if (key == 13) {\n          e.preventDefault();\n        }\n      };\n\n      KTUtil.addEvent(closeIcon, 'click', handleCancel);\n    }\n  };\n};\n\nvar KTQuickSearchInline = KTQuickSearch;\nvar KTQuickSearchOffcanvas = KTQuickSearch; // Init on page load completed\n\nKTUtil.ready(function () {\n  if (KTUtil.get('kt_quick_search_dropdown')) {\n    KTQuickSearch().init(KTUtil.get('kt_quick_search_dropdown'));\n  }\n\n  if (KTUtil.get('kt_quick_search_inline')) {\n    KTQuickSearchInline().init(KTUtil.get('kt_quick_search_inline'));\n  }\n\n  if (KTUtil.get('kt_quick_search_offcanvas')) {\n    KTQuickSearchOffcanvas().init(KTUtil.get('kt_quick_search_offcanvas'));\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/theme/core/layout/quick-search.js\n");

/***/ }),

/***/ "./resources/js/theme/core/util.js":
/*!*****************************************!*\
  !*** ./resources/js/theme/core/util.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @class KTUtil  base utilize class that privides helper functions\n */\n// Polyfills\n\n/**\n * Element.matches() polyfill (simple version)\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n/**\n * Element.closest() polyfill\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\n */\n\n\nif (!Element.prototype.closest) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n\n  Element.prototype.closest = function (s) {\n    var el = this;\n    var ancestor = this;\n    if (!document.documentElement.contains(el)) return null;\n\n    do {\n      if (ancestor.matches(s)) return ancestor;\n      ancestor = ancestor.parentElement;\n    } while (ancestor !== null);\n\n    return null;\n  };\n}\n/**\n * ChildNode.remove() polyfill\n * https://gomakethings.com/removing-an-element-from-the-dom-the-es6-way/\n * @author Chris Ferdinandi\n * @license MIT\n */\n\n\n(function (elem) {\n  for (var i = 0; i < elem.length; i++) {\n    if (!window[elem[i]] || 'remove' in window[elem[i]].prototype) continue;\n\n    window[elem[i]].prototype.remove = function () {\n      this.parentNode.removeChild(this);\n    };\n  }\n})(['Element', 'CharacterData', 'DocumentType']); //\n// requestAnimationFrame polyfill by Erik Möller.\n//  With fixes from Paul Irish and Tino Zijdel\n//\n//  http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n//  http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n//\n//  MIT license\n//\n\n\n(function () {\n  var lastTime = 0;\n  var vendors = ['webkit', 'moz'];\n\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n\n  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {\n    var currTime = new Date().getTime();\n    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n    var id = window.setTimeout(function () {\n      callback(currTime + timeToCall);\n    }, timeToCall);\n    lastTime = currTime + timeToCall;\n    return id;\n  };\n  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n    clearTimeout(id);\n  };\n})(); // Source: https://github.com/jserz/js_piece/blob/master/DOM/ParentNode/prepend()/prepend().md\n\n\n(function (arr) {\n  arr.forEach(function (item) {\n    if (item.hasOwnProperty('prepend')) {\n      return;\n    }\n\n    Object.defineProperty(item, 'prepend', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function prepend() {\n        var argArr = Array.prototype.slice.call(arguments),\n            docFrag = document.createDocumentFragment();\n        argArr.forEach(function (argItem) {\n          var isNode = argItem instanceof Node;\n          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n        });\n        this.insertBefore(docFrag, this.firstChild);\n      }\n    });\n  });\n})([Element.prototype, Document.prototype, DocumentFragment.prototype]); // Global variables\n\n\nwindow.KTUtilElementDataStore = {};\nwindow.KTUtilElementDataStoreID = 0;\nwindow.KTUtilDelegatedEventHandlers = {};\n\nvar KTUtil = function () {\n  var resizeHandlers = [];\n  /** @type {object} breakpoints The device width breakpoints **/\n\n  var breakpoints = {\n    sm: 544,\n    // Small screen / phone\n    md: 768,\n    // Medium screen / tablet\n    lg: 1024,\n    // Large screen / desktop\n    xl: 1200 // Extra large screen / wide desktop\n\n  };\n  /**\n   * Handle window resize event with some\n   * delay to attach event handlers upon resize complete\n   */\n\n  var _windowResizeHandler = function _windowResizeHandler() {\n    var _runResizeHandlers = function _runResizeHandlers() {\n      // reinitialize other subscribed elements\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        var each = resizeHandlers[i];\n        each.call();\n      }\n    };\n\n    var timeout = false; // holder for timeout id\n\n    var delay = 250; // delay after event is \"complete\" to run callback\n\n    window.addEventListener('resize', function () {\n      clearTimeout(timeout);\n      timeout = setTimeout(function () {\n        _runResizeHandlers();\n      }, delay); // wait 50ms until window resize finishes.\n    });\n  };\n\n  return {\n    /**\n     * Class main initializer.\n     * @param {object} options.\n     * @returns null\n     */\n    //main function to initiate the theme\n    init: function init(options) {\n      if (options && options.breakpoints) {\n        breakpoints = options.breakpoints;\n      }\n\n      _windowResizeHandler();\n    },\n\n    /**\n     * Adds window resize event handler.\n     * @param {function} callback function.\n     */\n    addResizeHandler: function addResizeHandler(callback) {\n      resizeHandlers.push(callback);\n    },\n\n    /**\n     * Removes window resize event handler.\n     * @param {function} callback function.\n     */\n    removeResizeHandler: function removeResizeHandler(callback) {\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        if (callback === resizeHandlers[i]) {\n          delete resizeHandlers[i];\n        }\n      }\n    },\n\n    /**\n     * Trigger window resize handlers.\n     */\n    runResizeHandlers: function runResizeHandlers() {\n      _runResizeHandlers();\n    },\n    resize: function resize() {\n      if (typeof Event === 'function') {\n        // modern browsers\n        window.dispatchEvent(new Event('resize'));\n      } else {\n        // for IE and other old browsers\n        // causes deprecation warning on modern browsers\n        var evt = window.document.createEvent('UIEvents');\n        evt.initUIEvent('resize', true, false, window, 0);\n        window.dispatchEvent(evt);\n      }\n    },\n\n    /**\n     * Get GET parameter value from URL.\n     * @param {string} paramName Parameter name.\n     * @returns {string}\n     */\n    getURLParam: function getURLParam(paramName) {\n      var searchString = window.location.search.substring(1),\n          i,\n          val,\n          params = searchString.split(\"&\");\n\n      for (i = 0; i < params.length; i++) {\n        val = params[i].split(\"=\");\n\n        if (val[0] == paramName) {\n          return unescape(val[1]);\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Checks whether current device is mobile touch.\n     * @returns {boolean}\n     */\n    isMobileDevice: function isMobileDevice() {\n      return this.getViewPort().width < this.getBreakpoint('lg') ? true : false;\n    },\n\n    /**\n     * Checks whether current device is desktop.\n     * @returns {boolean}\n     */\n    isDesktopDevice: function isDesktopDevice() {\n      return KTUtil.isMobileDevice() ? false : true;\n    },\n\n    /**\n     * Gets browser window viewport size. Ref:\n     * http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/\n     * @returns {object}\n     */\n    getViewPort: function getViewPort() {\n      var e = window,\n          a = 'inner';\n\n      if (!('innerWidth' in window)) {\n        a = 'client';\n        e = document.documentElement || document.body;\n      }\n\n      return {\n        width: e[a + 'Width'],\n        height: e[a + 'Height']\n      };\n    },\n\n    /**\n     * Checks whether given device mode is currently activated.\n     * @param {string} mode Responsive mode name(e.g: desktop,\n     *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)\n     * @returns {boolean}\n     */\n    isInResponsiveRange: function isInResponsiveRange(mode) {\n      var breakpoint = this.getViewPort().width;\n\n      if (mode == 'general') {\n        return true;\n      } else if (mode == 'desktop' && breakpoint >= this.getBreakpoint('lg') + 1) {\n        return true;\n      } else if (mode == 'tablet' && breakpoint >= this.getBreakpoint('md') + 1 && breakpoint < this.getBreakpoint('lg')) {\n        return true;\n      } else if (mode == 'mobile' && breakpoint <= this.getBreakpoint('md')) {\n        return true;\n      } else if (mode == 'desktop-and-tablet' && breakpoint >= this.getBreakpoint('md') + 1) {\n        return true;\n      } else if (mode == 'tablet-and-mobile' && breakpoint <= this.getBreakpoint('lg')) {\n        return true;\n      } else if (mode == 'minimal-desktop-and-below' && breakpoint <= this.getBreakpoint('xl')) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Generates unique ID for give prefix.\n     * @param {string} prefix Prefix for generated ID\n     * @returns {boolean}\n     */\n    getUniqueID: function getUniqueID(prefix) {\n      return prefix + Math.floor(Math.random() * new Date().getTime());\n    },\n\n    /**\n     * Gets window width for give breakpoint mode.\n     * @param {string} mode Responsive mode name(e.g: xl, lg, md, sm)\n     * @returns {number}\n     */\n    getBreakpoint: function getBreakpoint(mode) {\n      return breakpoints[mode];\n    },\n\n    /**\n     * Checks whether object has property matchs given key path.\n     * @param {object} obj Object contains values paired with given key path\n     * @param {string} keys Keys path seperated with dots\n     * @returns {object}\n     */\n    isset: function isset(obj, keys) {\n      var stone;\n      keys = keys || '';\n\n      if (keys.indexOf('[') !== -1) {\n        throw new Error('Unsupported object path notation.');\n      }\n\n      keys = keys.split('.');\n\n      do {\n        if (obj === undefined) {\n          return false;\n        }\n\n        stone = keys.shift();\n\n        if (!obj.hasOwnProperty(stone)) {\n          return false;\n        }\n\n        obj = obj[stone];\n      } while (keys.length);\n\n      return true;\n    },\n\n    /**\n     * Gets highest z-index of the given element parents\n     * @param {object} el jQuery element object\n     * @returns {number}\n     */\n    getHighestZindex: function getHighestZindex(el) {\n      var elem = KTUtil.get(el),\n          position,\n          value;\n\n      while (elem && elem !== document) {\n        // Ignore z-index if position is set to a value where z-index is ignored by the browser\n        // This makes behavior of this function consistent across browsers\n        // WebKit always returns auto if the element is positioned\n        position = KTUtil.css(elem, 'position');\n\n        if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n          // IE returns 0 when zIndex is not specified\n          // other browsers return a string\n          // we ignore the case of nested elements with an explicit value of 0\n          // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n          value = parseInt(KTUtil.css(elem, 'z-index'));\n\n          if (!isNaN(value) && value !== 0) {\n            return value;\n          }\n        }\n\n        elem = elem.parentNode;\n      }\n\n      return null;\n    },\n\n    /**\n     * Checks whether the element has any parent with fixed positionfreg\n     * @param {object} el jQuery element object\n     * @returns {boolean}\n     */\n    hasFixedPositionedParent: function hasFixedPositionedParent(el) {\n      var position;\n\n      while (el && el !== document) {\n        position = KTUtil.css(el, 'position');\n\n        if (position === \"fixed\") {\n          return true;\n        }\n\n        el = el.parentNode;\n      }\n\n      return false;\n    },\n\n    /**\n     * Simulates delay\n     */\n    sleep: function sleep(milliseconds) {\n      var start = new Date().getTime();\n\n      for (var i = 0; i < 1e7; i++) {\n        if (new Date().getTime() - start > milliseconds) {\n          break;\n        }\n      }\n    },\n\n    /**\n     * Gets randomly generated integer value within given min and max range\n     * @param {number} min Range start value\n     * @param {number} max Range end value\n     * @returns {number}\n     */\n    getRandomInt: function getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    /**\n     * Checks whether Angular library is included\n     * @returns {boolean}\n     */\n    isAngularVersion: function isAngularVersion() {\n      return window.Zone !== undefined ? true : false;\n    },\n    // jQuery Workarounds\n    // Deep extend:  $.extend(true, {}, objA, objB);\n    deepExtend: function deepExtend(out) {\n      out = out || {};\n\n      for (var i = 1; i < arguments.length; i++) {\n        var obj = arguments[i];\n        if (!obj) continue;\n\n        for (var key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            if (_typeof(obj[key]) === 'object') out[key] = KTUtil.deepExtend(out[key], obj[key]);else out[key] = obj[key];\n          }\n        }\n      }\n\n      return out;\n    },\n    // extend:  $.extend({}, objA, objB);\n    extend: function extend(out) {\n      out = out || {};\n\n      for (var i = 1; i < arguments.length; i++) {\n        if (!arguments[i]) continue;\n\n        for (var key in arguments[i]) {\n          if (arguments[i].hasOwnProperty(key)) out[key] = arguments[i][key];\n        }\n      }\n\n      return out;\n    },\n    get: function get(query) {\n      var el;\n\n      if (query === document) {\n        return document;\n      }\n\n      if (!!(query && query.nodeType === 1)) {\n        return query;\n      }\n\n      if (el = document.getElementById(query)) {\n        return el;\n      } else if (el = document.getElementsByTagName(query)) {\n        return el[0];\n      } else if (el = document.getElementsByClassName(query)) {\n        return el[0];\n      } else {\n        return null;\n      }\n    },\n    getByID: function getByID(query) {\n      if (!!(query && query.nodeType === 1)) {\n        return query;\n      }\n\n      return document.getElementById(query);\n    },\n    getByTag: function getByTag(query) {\n      var el;\n\n      if (el = document.getElementsByTagName(query)) {\n        return el[0];\n      } else {\n        return null;\n      }\n    },\n    getByClass: function getByClass(query) {\n      var el;\n\n      if (el = document.getElementsByClassName(query)) {\n        return el[0];\n      } else {\n        return null;\n      }\n    },\n\n    /**\n     * Checks whether the element has given classes\n     * @param {object} el jQuery element object\n     * @param {string} Classes string\n     * @returns {boolean}\n     */\n    hasClasses: function hasClasses(el, classes) {\n      if (!el) {\n        return;\n      }\n\n      var classesArr = classes.split(\" \");\n\n      for (var i = 0; i < classesArr.length; i++) {\n        if (KTUtil.hasClass(el, KTUtil.trim(classesArr[i])) == false) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    hasClass: function hasClass(el, className) {\n      if (!el) {\n        return;\n      }\n\n      return el.classList ? el.classList.contains(className) : new RegExp('\\\\b' + className + '\\\\b').test(el.className);\n    },\n    addClass: function addClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n\n      var classNames = className.split(' ');\n\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          if (classNames[i] && classNames[i].length > 0) {\n            el.classList.add(KTUtil.trim(classNames[i]));\n          }\n        }\n      } else if (!KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className += ' ' + KTUtil.trim(classNames[x]);\n        }\n      }\n    },\n    removeClass: function removeClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n\n      var classNames = className.split(' ');\n\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          el.classList.remove(KTUtil.trim(classNames[i]));\n        }\n      } else if (KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className = el.className.replace(new RegExp('\\\\b' + KTUtil.trim(classNames[x]) + '\\\\b', 'g'), '');\n        }\n      }\n    },\n    triggerCustomEvent: function triggerCustomEvent(el, eventName, data) {\n      var event;\n\n      if (window.CustomEvent) {\n        event = new CustomEvent(eventName, {\n          detail: data\n        });\n      } else {\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventName, true, true, data);\n      }\n\n      el.dispatchEvent(event);\n    },\n    triggerEvent: function triggerEvent(node, eventName) {\n      // Make sure we use the ownerDocument from the provided node to avoid cross-window problems\n      var doc;\n\n      if (node.ownerDocument) {\n        doc = node.ownerDocument;\n      } else if (node.nodeType == 9) {\n        // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n        doc = node;\n      } else {\n        throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n      }\n\n      if (node.dispatchEvent) {\n        // Gecko-style approach (now the standard) takes more work\n        var eventClass = \"\"; // Different events have different event classes.\n        // If this switch statement can't map an eventName to an eventClass,\n        // the event firing is going to fail.\n\n        switch (eventName) {\n          case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n\n          case \"mouseenter\":\n          case \"mouseleave\":\n          case \"mousedown\":\n          case \"mouseup\":\n            eventClass = \"MouseEvents\";\n            break;\n\n          case \"focus\":\n          case \"change\":\n          case \"blur\":\n          case \"select\":\n            eventClass = \"HTMLEvents\";\n            break;\n\n          default:\n            throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n            break;\n        }\n\n        var event = doc.createEvent(eventClass);\n        var bubbles = eventName == \"change\" ? false : true;\n        event.initEvent(eventName, bubbles, true); // All events created as bubbling and cancelable.\n\n        event.synthetic = true; // allow detection of synthetic events\n        // The second parameter says go ahead with the default action\n\n        node.dispatchEvent(event, true);\n      } else if (node.fireEvent) {\n        // IE-old school style\n        var event = doc.createEventObject();\n        event.synthetic = true; // allow detection of synthetic events\n\n        node.fireEvent(\"on\" + eventName, event);\n      }\n    },\n    index: function index(elm) {\n      elm = KTUtil.get(elm);\n      var c = elm.parentNode.children,\n          i = 0;\n\n      for (; i < c.length; i++) {\n        if (c[i] == elm) return i;\n      }\n    },\n    trim: function trim(string) {\n      return string.trim();\n    },\n    eventTriggered: function eventTriggered(e) {\n      if (e.currentTarget.dataset.triggered) {\n        return true;\n      } else {\n        e.currentTarget.dataset.triggered = true;\n        return false;\n      }\n    },\n    remove: function remove(el) {\n      if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n      }\n    },\n    find: function find(parent, query) {\n      parent = KTUtil.get(parent);\n\n      if (parent) {\n        return parent.querySelector(query);\n      }\n    },\n    findAll: function findAll(parent, query) {\n      parent = KTUtil.get(parent);\n\n      if (parent) {\n        return parent.querySelectorAll(query);\n      }\n    },\n    insertAfter: function insertAfter(el, referenceNode) {\n      return referenceNode.parentNode.insertBefore(el, referenceNode.nextSibling);\n    },\n    parents: function parents(elem, selector) {\n      // Element.matches() polyfill\n      if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n          var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n              i = matches.length;\n\n          while (--i >= 0 && matches.item(i) !== this) {}\n\n          return i > -1;\n        };\n      } // Set up a parent array\n\n\n      var parents = []; // Push each parent element to the array\n\n      for (; elem && elem !== document; elem = elem.parentNode) {\n        if (selector) {\n          if (elem.matches(selector)) {\n            parents.push(elem);\n          }\n\n          continue;\n        }\n\n        parents.push(elem);\n      } // Return our parent array\n\n\n      return parents;\n    },\n    children: function children(el, selector, log) {\n      if (!el || !el.childNodes) {\n        return;\n      }\n\n      var result = [],\n          i = 0,\n          l = el.childNodes.length;\n\n      for (var i; i < l; ++i) {\n        if (el.childNodes[i].nodeType == 1 && KTUtil.matches(el.childNodes[i], selector, log)) {\n          result.push(el.childNodes[i]);\n        }\n      }\n\n      return result;\n    },\n    child: function child(el, selector, log) {\n      var children = KTUtil.children(el, selector, log);\n      return children ? children[0] : null;\n    },\n    matches: function matches(el, selector, log) {\n      var p = Element.prototype;\n\n      var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {\n        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n      };\n\n      if (el && el.tagName) {\n        return f.call(el, selector);\n      } else {\n        return false;\n      }\n    },\n    data: function data(element) {\n      element = KTUtil.get(element);\n      return {\n        set: function set(name, data) {\n          if (element === undefined) {\n            return;\n          }\n\n          if (element.customDataTag === undefined) {\n            window.KTUtilElementDataStoreID++;\n            element.customDataTag = window.KTUtilElementDataStoreID;\n          }\n\n          if (window.KTUtilElementDataStore[element.customDataTag] === undefined) {\n            window.KTUtilElementDataStore[element.customDataTag] = {};\n          }\n\n          window.KTUtilElementDataStore[element.customDataTag][name] = data;\n        },\n        get: function get(name) {\n          if (element === undefined) {\n            return;\n          }\n\n          if (element.customDataTag === undefined) {\n            return null;\n          }\n\n          return this.has(name) ? window.KTUtilElementDataStore[element.customDataTag][name] : null;\n        },\n        has: function has(name) {\n          if (element === undefined) {\n            return false;\n          }\n\n          if (element.customDataTag === undefined) {\n            return false;\n          }\n\n          return window.KTUtilElementDataStore[element.customDataTag] && window.KTUtilElementDataStore[element.customDataTag][name] ? true : false;\n        },\n        remove: function remove(name) {\n          if (element && this.has(name)) {\n            delete window.KTUtilElementDataStore[element.customDataTag][name];\n          }\n        }\n      };\n    },\n    outerWidth: function outerWidth(el, margin) {\n      var width;\n\n      if (margin === true) {\n        width = parseFloat(el.offsetWidth);\n        width += parseFloat(KTUtil.css(el, 'margin-left')) + parseFloat(KTUtil.css(el, 'margin-right'));\n        return parseFloat(width);\n      } else {\n        width = parseFloat(el.offsetWidth);\n        return width;\n      }\n    },\n    offset: function offset(elem) {\n      var rect, win;\n      elem = KTUtil.get(elem);\n\n      if (!elem) {\n        return;\n      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n\n      if (!elem.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\n\n      rect = elem.getBoundingClientRect();\n      win = elem.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    height: function height(el) {\n      return KTUtil.css(el, 'height');\n    },\n    visible: function visible(el) {\n      return !(el.offsetWidth === 0 && el.offsetHeight === 0);\n    },\n    attr: function attr(el, name, value) {\n      el = KTUtil.get(el);\n\n      if (el == undefined) {\n        return;\n      }\n\n      if (value !== undefined) {\n        el.setAttribute(name, value);\n      } else {\n        return el.getAttribute(name);\n      }\n    },\n    hasAttr: function hasAttr(el, name) {\n      el = KTUtil.get(el);\n\n      if (el == undefined) {\n        return;\n      }\n\n      return el.getAttribute(name) ? true : false;\n    },\n    removeAttr: function removeAttr(el, name) {\n      el = KTUtil.get(el);\n\n      if (el == undefined) {\n        return;\n      }\n\n      el.removeAttribute(name);\n    },\n    animate: function animate(from, to, duration, update, easing, done) {\n      /**\n       * TinyAnimate.easings\n       *  Adapted from jQuery Easing\n       */\n      var easings = {};\n      var easing;\n\n      easings.linear = function (t, b, c, d) {\n        return c * t / d + b;\n      };\n\n      easing = easings.linear; // Early bail out if called incorrectly\n\n      if (typeof from !== 'number' || typeof to !== 'number' || typeof duration !== 'number' || typeof update !== 'function') {\n        return;\n      } // Create mock done() function if necessary\n\n\n      if (typeof done !== 'function') {\n        done = function done() {};\n      } // Pick implementation (requestAnimationFrame | setTimeout)\n\n\n      var rAF = window.requestAnimationFrame || function (callback) {\n        window.setTimeout(callback, 1000 / 50);\n      }; // Animation loop\n\n\n      var canceled = false;\n      var change = to - from;\n\n      function loop(timestamp) {\n        var time = (timestamp || +new Date()) - start;\n\n        if (time >= 0) {\n          update(easing(time, from, change, duration));\n        }\n\n        if (time >= 0 && time >= duration) {\n          update(to);\n          done();\n        } else {\n          rAF(loop);\n        }\n      }\n\n      update(from); // Start animation loop\n\n      var start = window.performance && window.performance.now ? window.performance.now() : +new Date();\n      rAF(loop);\n    },\n    actualCss: function actualCss(el, prop, cache) {\n      el = KTUtil.get(el);\n      var css = '';\n\n      if (el instanceof HTMLElement === false) {\n        return;\n      }\n\n      if (!el.getAttribute('kt-hidden-' + prop) || cache === false) {\n        var value; // the element is hidden so:\n        // making the el block so we can meassure its height but still be hidden\n\n        css = el.style.cssText;\n        el.style.cssText = 'position: absolute; visibility: hidden; display: block;';\n\n        if (prop == 'width') {\n          value = el.offsetWidth;\n        } else if (prop == 'height') {\n          value = el.offsetHeight;\n        }\n\n        el.style.cssText = css; // store it in cache\n\n        el.setAttribute('kt-hidden-' + prop, value);\n        return parseFloat(value);\n      } else {\n        // store it in cache\n        return parseFloat(el.getAttribute('kt-hidden-' + prop));\n      }\n    },\n    actualHeight: function actualHeight(el, cache) {\n      return KTUtil.actualCss(el, 'height', cache);\n    },\n    actualWidth: function actualWidth(el, cache) {\n      return KTUtil.actualCss(el, 'width', cache);\n    },\n    getScroll: function getScroll(element, method) {\n      // The passed in `method` value should be 'Top' or 'Left'\n      method = 'scroll' + method;\n      return element == window || element == document ? self[method == 'scrollTop' ? 'pageYOffset' : 'pageXOffset'] || browserSupportsBoxModel && document.documentElement[method] || document.body[method] : element[method];\n    },\n    css: function css(el, styleProp, value) {\n      el = KTUtil.get(el);\n\n      if (!el) {\n        return;\n      }\n\n      if (value !== undefined) {\n        el.style[styleProp] = value;\n      } else {\n        var defaultView = (el.ownerDocument || document).defaultView; // W3C standard way:\n\n        if (defaultView && defaultView.getComputedStyle) {\n          // sanitize property name to css notation\n          // (hyphen separated words eg. font-Size)\n          styleProp = styleProp.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n          return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n        } else if (el.currentStyle) {\n          // IE\n          // sanitize property name to camelCase\n          styleProp = styleProp.replace(/\\-(\\w)/g, function (str, letter) {\n            return letter.toUpperCase();\n          });\n          value = el.currentStyle[styleProp]; // convert other units to pixels on IE\n\n          if (/^\\d+(em|pt|%|ex)?$/i.test(value)) {\n            return function (value) {\n              var oldLeft = el.style.left,\n                  oldRsLeft = el.runtimeStyle.left;\n              el.runtimeStyle.left = el.currentStyle.left;\n              el.style.left = value || 0;\n              value = el.style.pixelLeft + \"px\";\n              el.style.left = oldLeft;\n              el.runtimeStyle.left = oldRsLeft;\n              return value;\n            }(value);\n          }\n\n          return value;\n        }\n      }\n    },\n    slide: function slide(el, dir, speed, callback, recalcMaxHeight) {\n      if (!el || dir == 'up' && KTUtil.visible(el) === false || dir == 'down' && KTUtil.visible(el) === true) {\n        return;\n      }\n\n      speed = speed ? speed : 600;\n      var calcHeight = KTUtil.actualHeight(el);\n      var calcPaddingTop = false;\n      var calcPaddingBottom = false;\n\n      if (KTUtil.css(el, 'padding-top') && KTUtil.data(el).has('slide-padding-top') !== true) {\n        KTUtil.data(el).set('slide-padding-top', KTUtil.css(el, 'padding-top'));\n      }\n\n      if (KTUtil.css(el, 'padding-bottom') && KTUtil.data(el).has('slide-padding-bottom') !== true) {\n        KTUtil.data(el).set('slide-padding-bottom', KTUtil.css(el, 'padding-bottom'));\n      }\n\n      if (KTUtil.data(el).has('slide-padding-top')) {\n        calcPaddingTop = parseInt(KTUtil.data(el).get('slide-padding-top'));\n      }\n\n      if (KTUtil.data(el).has('slide-padding-bottom')) {\n        calcPaddingBottom = parseInt(KTUtil.data(el).get('slide-padding-bottom'));\n      }\n\n      if (dir == 'up') {\n        // up\n        el.style.cssText = 'display: block; overflow: hidden;';\n\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            el.style.paddingTop = calcPaddingTop - value + 'px';\n          }, 'linear');\n        }\n\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = calcPaddingBottom - value + 'px';\n          }, 'linear');\n        }\n\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = calcHeight - value + 'px';\n        }, 'linear', function () {\n          callback();\n          el.style.height = '';\n          el.style.display = 'none';\n        });\n      } else if (dir == 'down') {\n        // down\n        el.style.cssText = 'display: block; overflow: hidden;';\n\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            el.style.paddingTop = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingTop = '';\n          });\n        }\n\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingBottom = '';\n          });\n        }\n\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = value + 'px';\n        }, 'linear', function () {\n          callback();\n          el.style.height = '';\n          el.style.display = '';\n          el.style.overflow = '';\n        });\n      }\n    },\n    slideUp: function slideUp(el, speed, callback) {\n      KTUtil.slide(el, 'up', speed, callback);\n    },\n    slideDown: function slideDown(el, speed, callback) {\n      KTUtil.slide(el, 'down', speed, callback);\n    },\n    show: function show(el, display) {\n      if (typeof el !== 'undefined') {\n        el.style.display = display ? display : 'block';\n      }\n    },\n    hide: function hide(el) {\n      if (typeof el !== 'undefined') {\n        el.style.display = 'none';\n      }\n    },\n    addEvent: function addEvent(el, type, handler, one) {\n      el = KTUtil.get(el);\n\n      if (typeof el !== 'undefined') {\n        el.addEventListener(type, handler);\n      }\n    },\n    removeEvent: function removeEvent(el, type, handler) {\n      el = KTUtil.get(el);\n      el.removeEventListener(type, handler);\n    },\n    on: function on(element, selector, event, handler) {\n      if (!selector) {\n        return;\n      }\n\n      var eventId = KTUtil.getUniqueID('event');\n\n      window.KTUtilDelegatedEventHandlers[eventId] = function (e) {\n        var targets = element.querySelectorAll(selector);\n        var target = e.target;\n\n        while (target && target !== element) {\n          for (var i = 0, j = targets.length; i < j; i++) {\n            if (target === targets[i]) {\n              handler.call(target, e);\n            }\n          }\n\n          target = target.parentNode;\n        }\n      };\n\n      KTUtil.addEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      return eventId;\n    },\n    off: function off(element, event, eventId) {\n      if (!element || !window.KTUtilDelegatedEventHandlers[eventId]) {\n        return;\n      }\n\n      KTUtil.removeEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      delete window.KTUtilDelegatedEventHandlers[eventId];\n    },\n    one: function onetime(el, type, callback) {\n      el = KTUtil.get(el);\n      el.addEventListener(type, function callee(e) {\n        // remove event\n        if (e.target && e.target.removeEventListener) {\n          e.target.removeEventListener(e.type, callee);\n        } // call handler\n\n\n        return callback(e);\n      });\n    },\n    hash: function hash(str) {\n      var hash = 0,\n          i,\n          chr;\n      if (str.length === 0) return hash;\n\n      for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n      }\n\n      return hash;\n    },\n    animateClass: function animateClass(el, animationName, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n\n      KTUtil.addClass(el, 'animated ' + animationName);\n      KTUtil.one(el, animation, function () {\n        KTUtil.removeClass(el, 'animated ' + animationName);\n      });\n\n      if (callback) {\n        KTUtil.one(el, animation, callback);\n      }\n    },\n    transitionEnd: function transitionEnd(el, callback) {\n      var transition;\n      var transitions = {\n        transition: 'transitionend',\n        OTransition: 'oTransitionEnd',\n        MozTransition: 'mozTransitionEnd',\n        WebkitTransition: 'webkitTransitionEnd',\n        msTransition: 'msTransitionEnd'\n      };\n\n      for (var t in transitions) {\n        if (el.style[t] !== undefined) {\n          transition = transitions[t];\n        }\n      }\n\n      KTUtil.one(el, transition, callback);\n    },\n    animationEnd: function animationEnd(el, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n\n      KTUtil.one(el, animation, callback);\n    },\n    animateDelay: function animateDelay(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-delay', value);\n      }\n    },\n    animateDuration: function animateDuration(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-duration', value);\n      }\n    },\n    scrollTo: function scrollTo(target, offset, duration) {\n      var duration = duration ? duration : 500;\n      var target = KTUtil.get(target);\n      var targetPos = target ? KTUtil.offset(target).top : 0;\n      var scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n      var from, to;\n\n      if (targetPos > scrollPos) {\n        from = targetPos;\n        to = scrollPos;\n      } else {\n        from = scrollPos;\n        to = targetPos;\n      }\n\n      if (offset) {\n        to += offset;\n      }\n\n      KTUtil.animate(from, to, duration, function (value) {\n        document.documentElement.scrollTop = value;\n        document.body.parentNode.scrollTop = value;\n        document.body.scrollTop = value;\n      }); //, easing, done\n    },\n    scrollTop: function scrollTop(offset, duration) {\n      KTUtil.scrollTo(null, offset, duration);\n    },\n    isArray: function isArray(obj) {\n      return obj && Array.isArray(obj);\n    },\n    ready: function ready(callback) {\n      if (document.attachEvent ? document.readyState === \"complete\" : document.readyState !== \"loading\") {\n        callback();\n      } else {\n        document.addEventListener('DOMContentLoaded', callback);\n      }\n    },\n    isEmpty: function isEmpty(obj) {\n      for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    numberString: function numberString(nStr) {\n      nStr += '';\n      var x = nStr.split('.');\n      var x1 = x[0];\n      var x2 = x.length > 1 ? '.' + x[1] : '';\n      var rgx = /(\\d+)(\\d{3})/;\n\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n      }\n\n      return x1 + x2;\n    },\n    detectIE: function detectIE() {\n      var ua = window.navigator.userAgent; // Test values; Uncomment to check result …\n      // IE 10\n      // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n      // IE 11\n      // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n      // Edge 12 (Spartan)\n      // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n      // Edge 13\n      // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';\n\n      var msie = ua.indexOf('MSIE ');\n\n      if (msie > 0) {\n        // IE 10 or older => return version number\n        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n      }\n\n      var trident = ua.indexOf('Trident/');\n\n      if (trident > 0) {\n        // IE 11 => return version number\n        var rv = ua.indexOf('rv:');\n        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n      }\n\n      var edge = ua.indexOf('Edge/');\n\n      if (edge > 0) {\n        // Edge (IE 12+) => return version number\n        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n      } // other browser\n\n\n      return false;\n    },\n    isRTL: function isRTL() {\n      return KTUtil.attr(KTUtil.get('html'), 'direction') == 'rtl';\n    },\n    //\n    // Scroller\n    scrollInit: function scrollInit(element, options) {\n      if (!element) return; // Define init function\n\n      function init() {\n        var ps;\n        var height;\n\n        if (options.height instanceof Function) {\n          height = parseInt(options.height.call());\n        } else {\n          height = parseInt(options.height);\n        } // Destroy scroll on table and mobile modes\n\n\n        if ((options.mobileNativeScroll || options.disableForMobile) && KTUtil.isInResponsiveRange('tablet-and-mobile')) {\n          ps = KTUtil.data(element).get('ps');\n\n          if (ps) {\n            if (options.resetHeightOnDestroy) {\n              KTUtil.css(element, 'height', 'auto');\n            } else {\n              KTUtil.css(element, 'overflow', 'auto');\n\n              if (height > 0) {\n                KTUtil.css(element, 'height', height + 'px');\n              }\n            }\n\n            ps.destroy();\n            ps = KTUtil.data(element).remove('ps');\n          } else if (height > 0) {\n            KTUtil.css(element, 'overflow', 'auto');\n            KTUtil.css(element, 'height', height + 'px');\n          }\n\n          return;\n        }\n\n        if (height > 0) {\n          KTUtil.css(element, 'height', height + 'px');\n        }\n\n        if (options.desktopNativeScroll) {\n          KTUtil.css(element, 'overflow', 'auto');\n          return;\n        } // Init scroll\n\n\n        KTUtil.css(element, 'overflow', 'hidden');\n        ps = KTUtil.data(element).get('ps');\n\n        if (ps) {\n          ps.update();\n        } else {\n          KTUtil.addClass(element, 'kt-scroll');\n          ps = new PerfectScrollbar(element, {\n            wheelSpeed: 0.5,\n            swipeEasing: true,\n            wheelPropagation: options.windowScroll === false ? false : true,\n            minScrollbarLength: 40,\n            maxScrollbarLength: 300,\n            suppressScrollX: KTUtil.attr(element, 'data-scroll-x') != 'true' ? true : false\n          });\n          KTUtil.data(element).set('ps', ps);\n        } // Remember scroll position in cookie\n\n\n        var uid = KTUtil.attr(element, 'id');\n\n        if (options.rememberPosition === true && Cookies && uid) {\n          if (Cookies.get(uid)) {\n            var pos = parseInt(Cookies.get(uid));\n\n            if (pos > 0) {\n              element.scrollTop = pos;\n            }\n          }\n\n          element.addEventListener('ps-scroll-y', function () {\n            Cookies.set(uid, element.scrollTop);\n          });\n        }\n      } // Init\n\n\n      init(); // Handle window resize\n\n      if (options.handleWindowResize) {\n        KTUtil.addResizeHandler(function () {\n          init();\n        });\n      }\n    },\n    scrollUpdate: function scrollUpdate(element) {\n      var ps = KTUtil.data(element).get('ps');\n\n      if (ps) {\n        ps.update();\n      }\n    },\n    scrollUpdateAll: function scrollUpdateAll(parent) {\n      var scrollers = KTUtil.findAll(parent, '.ps');\n\n      for (var i = 0, len = scrollers.length; i < len; i++) {\n        KTUtil.scrollerUpdate(scrollers[i]);\n      }\n    },\n    scrollDestroy: function scrollDestroy(element) {\n      var ps = KTUtil.data(element).get('ps');\n\n      if (ps) {\n        ps.destroy();\n        ps = KTUtil.data(element).remove('ps');\n      }\n    },\n    setHTML: function setHTML(el, html) {\n      if (KTUtil.get(el)) {\n        KTUtil.get(el).innerHTML = html;\n      }\n    },\n    getHTML: function getHTML(el) {\n      if (KTUtil.get(el)) {\n        return KTUtil.get(el).innerHTML;\n      }\n    },\n    getDocumentHeight: function getDocumentHeight() {\n      var body = document.body;\n      var html = document.documentElement;\n      return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n    },\n    getScrollTop: function getScrollTop() {\n      return Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop);\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTUtil;\n} // Initialize KTUtil class on document ready\n\n\nKTUtil.ready(function () {\n  KTUtil.init();\n}); // CSS3 Transitions only after page load(.kt-page-loading class added to body tag and remove with JS on page load)\n\nwindow.onload = function () {\n  KTUtil.removeClass(KTUtil.get('body'), 'kt-page--loading');\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/theme/core/util.js\n");

/***/ }),

/***/ 1:
/*!*************************************!*\
  !*** multi ./resources/js/theme.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/setsu/larvata/wfc/web-backend/resources/js/theme.js */"./resources/js/theme.js");


/***/ })

/******/ });